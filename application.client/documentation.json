{
    "pipes": [],
    "interfaces": [
        {
            "name": "BookingDto",
            "id": "interface-BookingDto-dd0a476eb8065649243adb19b93957d2cdaf43e25f01eeabb72883243962fc0731d6403335dd8b1073a229f7aa033f7f8f54707a3e3e1d2c9fef0af554427e0a",
            "file": "src/DTOs/GetBooking/BookingDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { WorkspaceDto } from \"./WorkspaceDto\"\r\n\r\nexport interface BookingDto\r\n{\r\n  id: number,\r\n  name: string\r\n  email: string\r\n  workspace: WorkspaceDto\r\n  seats: number\r\n  startDate: string\r\n  endDate: string\r\n  startTime: string\r\n  endTime: string\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "endTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "seats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "workspace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceDto",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BookingDto",
            "id": "interface-BookingDto-dd0a476eb8065649243adb19b93957d2cdaf43e25f01eeabb72883243962fc0731d6403335dd8b1073a229f7aa033f7f8f54707a3e3e1d2c9fef0af554427e0a-1",
            "file": "src/DTOs/GetBookings/BookingDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { WorkspaceDto } from \"./WorkspaceDto\"\r\n\r\nexport interface BookingDto\r\n{\r\n  id: number,\r\n  name: string\r\n  email: string\r\n  workspace: WorkspaceDto\r\n  seats: number\r\n  startDate: string\r\n  endDate: string\r\n  startTime: string\r\n  endTime: string\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "endTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "seats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "workspace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceDto",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BookingDto-1"
        },
        {
            "name": "BookingDto",
            "id": "interface-BookingDto-5ae1dfcf9b7feeb0dc8f3f886720fc40fdddb7e5c1e4e327388717749d20bfd05525ae51ae513597adcba578034bf3ca5019d336a8b14970681d915710e5de66-2",
            "file": "src/DTOs/GetWorkspaces/BookingDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BookingDto\r\n{\r\n  id: number,\r\n  seats: number\r\n  startDate: string\r\n  endDate: string\r\n  startTime: string\r\n  endTime: string\r\n}\r\n",
            "properties": [
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "endTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "seats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "BookingDto-2"
        },
        {
            "name": "CoworkingDto",
            "id": "interface-CoworkingDto-dc1f945b20221e05ec1d618382c48c9e29c5f1f1928d66cab3266fd35a950ccd32b1fa979d081655780b1f31612a9ffbb4a5a5f2b47d9c9e78f315bede01852e",
            "file": "src/DTOs/GetBookings/CoworkingDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BookingDto } from \"./BookingDto\";\r\n\r\nexport interface CoworkingDto\r\n{\r\n  id: number,\r\n  name: string,\r\n  description: string,\r\n  address: string,\r\n  bookings: BookingDto[]\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "bookings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BookingDto[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CoworkingDto",
            "id": "interface-CoworkingDto-5d75efaf12aec499e635e680b3aba590c36405382bc2f2fd54a012f0b970e5c073666632ac61e685857956e0c978cb6ef45929f8dc618dd456cb52931d8d3a10-1",
            "file": "src/DTOs/GetCoworkings/CoworkingDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RoomCountDto } from \"./RoomCountDto\";\r\n\r\nexport interface CoworkingDto\r\n{\r\n  id: number,\r\n  name: string,\r\n  description: string,\r\n  address: string,\r\n  roomCountDtos: RoomCountDto[]\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "roomCountDtos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoomCountDto[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CoworkingDto-1"
        },
        {
            "name": "CreateBookingDto",
            "id": "interface-CreateBookingDto-0cb23350bb172c489c39553399cfbab25d26f827a5e5c789a20527bb5bb4dbe70402edbbc5553ee79bd8cd8cda4b171d1a1198213fef55625c795771392eb4cd",
            "file": "src/DTOs/CreateBookingDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { WorkspaceType } from \"../models/WorkspaceType\"\r\n\r\nexport interface CreateBookingDto\r\n{\r\n  coworkingId: number,\r\n  name: string,\r\n  email: string\r\n  workspaceType: WorkspaceType,\r\n  seats: number,\r\n  startDate: string,\r\n  endDate: string,\r\n  startTime: string,\r\n  endTime: string\r\n}\r\n",
            "properties": [
                {
                    "name": "coworkingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "endTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "seats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "workspaceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EditBookingDto",
            "id": "interface-EditBookingDto-0514dea4974b15778c31c59e0aa3372532d3f6d592408c9c43f02175eb14115ed83e73fc67d1f02dbc9eb23eaa02b618e750978139d3760ecb5a29dec401687e",
            "file": "src/DTOs/EditBookingDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { WorkspaceType } from \"../models/WorkspaceType\"\r\n\r\nexport interface EditBookingDto\r\n{\r\n  name: string\r\n  email: string\r\n  workspaceType: WorkspaceType\r\n  seats: number\r\n  startDate: string\r\n  endDate: string\r\n  startTime: string\r\n  endTime: string\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "endTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "seats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "workspaceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FreeRoomsDto",
            "id": "interface-FreeRoomsDto-f8fa70ca09334a2d9d8d5e090fcc1984280ffea1a96287622490cb2f00e4875d4d5361840c41efce37bec237ddeabecfe16c3342597fde3daf87aceefdbc1bf1",
            "file": "src/DTOs/GetWorkspaces/FreeRoomsDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FreeRoomsDto\r\n{\r\n  capacity: number\r\n  rooms: number\r\n}\r\n",
            "properties": [
                {
                    "name": "capacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "rooms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginDto",
            "id": "interface-LoginDto-735d8d5a0daa8cd4f4b2694fb10ec5c28119f2e12e06f65afd19f5fc48cea7a3367de8b0c016c8a4baacd4fe5e6d267703a30e2ba4dd3cb21c1dc3e03ddc6797",
            "file": "src/DTOs/LoginDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoginDto\r\n{\r\n    email: string\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Option",
            "id": "interface-Option-275fcce04e9c1b8da1701ac0403d70b76c01e8bdef203bb24f6abaed38e0506bbdac36d64e0b76f87121aca4cb9966454697d09e196f724ebac985838cdff928",
            "file": "src/models/Option.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Option<T>\r\n{\r\n  value: T;\r\n  text: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RoomCountDto",
            "id": "interface-RoomCountDto-1e98932f57ff2a8293bc722c50c936ff8919533c4e6f54beaad890223737a292328a697fd9f9f722a5f1c4e30a3abf445a0be550a6d9b66326159190ba87afcb",
            "file": "src/DTOs/GetCoworkings/RoomCountDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { WorkspaceType } from \"../../models/WorkspaceType\";\r\n\r\nexport interface RoomCountDto\r\n{\r\n  workspaceType: WorkspaceType,\r\n  rooms: number\r\n}      \r\n",
            "properties": [
                {
                    "name": "rooms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "workspaceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StringDto",
            "id": "interface-StringDto-2b30f880d76f10ba8134dffee68dd88ef86fad6c9ff0de95b143cd105feebd46632418eb6b2b24aede0aad89ec4103de88008e10ef4f295057171c34550a849e",
            "file": "src/DTOs/StringDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StringDto\r\n{\r\n    value: string\r\n}",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WorkspaceDto",
            "id": "interface-WorkspaceDto-c591009706833ce2968fdd7808f1a49e749936a74291e5836fbd8d6e398fd150a51159017f33bb0c6032f347b7e4f9603fc499ab5645c015552515af55ad715b",
            "file": "src/DTOs/GetBooking/WorkspaceDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Amenity } from \"../../models/Amenity\"\r\nimport { WorkspaceType } from \"../../models/WorkspaceType\"\r\nimport { BookingDto } from \"./BookingDto\";\r\n\r\nexport interface WorkspaceDto\r\n{\r\n  id: number,\r\n  capacity: number,\r\n  amenities: Amenity[]\r\n  workspaceType: WorkspaceType\r\n}\r\n",
            "properties": [
                {
                    "name": "amenities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Amenity[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "capacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "workspaceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WorkspaceDto",
            "id": "interface-WorkspaceDto-25cf68eef3292fdb6057e34846dbd619244deae2a216df3b2335cd2f178dbe86236ebc54bac0076db10e53ade3effe11146e5dbf83092d2777212faa40ba42f0-1",
            "file": "src/DTOs/GetBookings/WorkspaceDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Amenity } from \"../../models/Amenity\"\r\nimport { WorkspaceType } from \"../../models/WorkspaceType\"\r\n\r\nexport interface WorkspaceDto\r\n{\r\n  id: number,\r\n  capacity: number,\r\n  amenities: Amenity[]\r\n  workspaceType: WorkspaceType\r\n}\r\n",
            "properties": [
                {
                    "name": "amenities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Amenity[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "capacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "workspaceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "WorkspaceDto-1"
        },
        {
            "name": "WorkspaceGroupDto",
            "id": "interface-WorkspaceGroupDto-11fd9d20aaffd5ec87ce8dc563eb693e6f1889c8a240b3180a6791974f138012452745cddf27908aa5b4ed60496acf43fd14fc73540f17140aa1c5419c797b85",
            "file": "src/DTOs/GetWorkspaces/WorkspaceGroupDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { WorkspaceType } from \"../../models/WorkspaceType\"\r\nimport { Amenity } from \"../../models/Amenity\"\r\nimport { BookingDto } from \"./BookingDto\"\r\nimport { FreeRoomsDto } from \"./FreeRoomsDto\"\r\n\r\nexport interface WorkspaceGroupDto\r\n{\r\n  workspaceType: WorkspaceType\r\n  amenities: Amenity[]\r\n  freeRooms: FreeRoomsDto[],\r\n  bookings: BookingDto[]\r\n}\r\n",
            "properties": [
                {
                    "name": "amenities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Amenity[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "bookings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BookingDto[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "freeRooms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreeRoomsDto[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "workspaceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-8d05bf648068734bb854112107b093ccbae47064093c10de2d2d7a99b2231220ed2c0eb8c8f94f7f27e0ab8513b9309ea270eaae3a7ca74cb0bd4651a53e8191",
            "file": "src/app/api.service.ts",
            "properties": [
                {
                    "name": "endpoint",
                    "defaultValue": "`https://${environment.server}/`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "BookingsQuestion",
                    "args": [
                        {
                            "name": "dto",
                            "type": "StringDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StringDto>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "StringDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateBooking",
                    "args": [
                        {
                            "name": "dto",
                            "type": "CreateBookingDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "CreateBookingDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteBooking",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "EditBooking",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "EditBookingDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "EditBookingDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetBooking",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BookingDto>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetBookings",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CoworkingDto2[]>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "GetCoworkings",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CoworkingDto[]>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<StringDto>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "GetWorkspaces",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WorkspaceGroupDto[]>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "dto",
                            "type": "LoginDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "LoginDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from './../environments/environment';\r\n\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { StringDto } from '../DTOs/StringDto';\r\nimport { LoginDto } from '../DTOs/LoginDto';\r\nimport { CreateBookingDto } from '../DTOs/CreateBookingDto';\r\nimport { BookingDto } from '../DTOs/GetBooking/BookingDto';\r\nimport { CoworkingDto } from '../DTOs/GetCoworkings/CoworkingDto';\r\nimport { CoworkingDto as CoworkingDto2 } from '../DTOs/GetBookings/CoworkingDto';\r\nimport { WorkspaceGroupDto } from '../DTOs/GetWorkspaces/WorkspaceGroupDto';\r\nimport { EditBookingDto } from '../DTOs/EditBookingDto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n@Injectable()\r\nexport class ApiService\r\n{\r\n  readonly endpoint: string = `https://${environment.server}/`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(dto: LoginDto)\r\n  {\r\n    let url = `${this.endpoint}api/auth/user`;\r\n    return this.http\r\n      .post(url, dto, { withCredentials: true });\r\n  }\r\n  getUser(): Observable<StringDto>\r\n  {\r\n    let url = `${this.endpoint}api/auth/user`;\r\n    return this.http\r\n      .get<StringDto>(url, { withCredentials: true });\r\n  }\r\n\r\n  GetCoworkings(): Observable<CoworkingDto[]> \r\n  {\r\n    let url = `${this.endpoint}api/coworking`;\r\n    return this.http\r\n      .get<CoworkingDto[]>(url, { withCredentials: true });\r\n  }\r\n\r\n  GetWorkspaces(id:number): Observable<WorkspaceGroupDto[]> \r\n  {\r\n    let url = `${this.endpoint}api/workspace/${id}`;\r\n    return this.http\r\n      .get<WorkspaceGroupDto[]>(url, { withCredentials: true });\r\n  }\r\n\r\n  CreateBooking(dto: CreateBookingDto)\r\n  {\r\n    let url = `${this.endpoint}api/booking`;\r\n    return this.http\r\n      .post(url, dto, { withCredentials: true });\r\n  }\r\n  DeleteBooking(id: number)\r\n  {\r\n    let url = `${this.endpoint}api/booking/${id}`;\r\n    return this.http\r\n      .delete(url, { withCredentials: true });\r\n  }\r\n  EditBooking(id: number, dto: EditBookingDto)\r\n  {\r\n    let url = `${this.endpoint}api/booking/${id}`;\r\n    return this.http\r\n      .patch(url, dto, { withCredentials: true });\r\n  }\r\n  GetBooking(id: number): Observable<BookingDto> \r\n  {\r\n    let url = `${this.endpoint}api/booking/${id}`;\r\n    return this.http\r\n      .get<BookingDto>(url, { withCredentials: true });\r\n  }\r\n  GetBookings(): Observable<CoworkingDto2[]> \r\n  {\r\n    let url = `${this.endpoint}api/booking`;\r\n    return this.http\r\n      .get<CoworkingDto2[]>(url, { withCredentials: true });\r\n  }\r\n\r\n  BookingsQuestion(dto: StringDto): Observable<StringDto> \r\n  {\r\n    let url = `${this.endpoint}api/booking/question`;\r\n    return this.http\r\n      .post<StringDto>(url, dto, { withCredentials: true });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AiAssistantComponent",
            "id": "component-AiAssistantComponent-bfc2e8454453e9de783886d552b609510ef531ce6f98770f230f17284272ca2297e289fa3894938e55f6444996ab41fc4c00757b73062e19e1ca7db076496a3b",
            "file": "src/app/ai-assistant/ai-assistant.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ai-assistant",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ai-assistant.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "exampleQuestions",
                    "defaultValue": "[\"How many bookings do I have?\", \"What was booked last week?\", \"Do I have anything on May 18?\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "question",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "responseQuestion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "question",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "question",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ApiService } from '../api.service';\r\nimport { StringDto } from '../../DTOs/StringDto';\r\n\r\n@Component({\r\n  selector: 'app-ai-assistant',\r\n  templateUrl: './ai-assistant.component.html',\r\n  styleUrl: './ai-assistant.component.css',\r\n  standalone: false\r\n})\r\nexport class AiAssistantComponent\r\n{\r\n  constructor(private api: ApiService) { }\r\n\r\n  response: string | undefined;\r\n  responseQuestion: string | undefined;\r\n  question: string = \"\";\r\n\r\n  exampleQuestions: string[] = [\"How many bookings do I have?\", \"What was booked last week?\", \"Do I have anything on May 18?\"];\r\n\r\n  submit(question: string)\r\n  {\r\n    let responseQuestion = question;\r\n    this.api.BookingsQuestion(<StringDto>{ value: question }).subscribe({\r\n      error: () => { this.response = undefined },\r\n      next: (response) =>\r\n      {\r\n        this.response = response.value\r\n        this.responseQuestion = responseQuestion\r\n      }\r\n    })\r\n  }\r\n}\r\n",
            "styleUrl": "./ai-assistant.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-col gap-10\">\r\n    <div class=\"text-4xl\">AI Assistant</div>\r\n    @if (response!=undefined){\r\n    <div class=\"flex flex-col  px-4 py-3 bg-white border-[#C2BCD8] border-1 rounded-lg gap-3\">\r\n        <div class=\"text-3xl\">\r\n            {{responseQuestion}}\r\n        </div>\r\n        <div class=\"flex flex-col gap-1\">\r\n            @for(string of response.split(\"\\n\");track i;let i = $index){\r\n            <div>\r\n                {{string}}\r\n            </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    }\r\n    <div class=\"flex flex-col gap-6\">\r\n        <div class=\"text-2xl\">{{response==undefined?\"Example questions\":\"Ask something else\"}}</div>\r\n        <div class=\"flex flex-row gap-4\">\r\n            @for(sample of exampleQuestions; track sample){\r\n            <button class=\" text-[#5C5AF3] border-[#5C5AF3] border-1 px-4 py-3 rounded-sm\" (click)=\"submit(sample)\">{{sample}}</button>\r\n            }\r\n        </div>\r\n    </div>\r\n    <div class=\"flex flex-row justify-between px-4 py-3 bg-white border-[#C2BCD8] border-1 rounded-lg\">\r\n        <input class=\"grow  text-gray-900 focus:outline-transparent focus:border-transparent\" type=\"text\" placeholder=\"Ask anything...\" [(ngModel)]=\"question\" (keydown.enter)=\"submit(question)\">\r\n        <button class=\" px-2 py-2 bg-[#5C5AF3] rounded\" (click)=\"submit(question)\">\r\n            <img class=\"w-4 h-4\" src=\"assets/Vector.svg\">\r\n        </button>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-38cbbcf4b8298a1112ae2435e0b8a748b39b354b68ef1086ddb286845b702fce9ec6248169889b034c12d86bf44fd1c502bfc940888f179c68c41d201060832b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'application.client'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.css',\r\n  standalone: false\r\n})\r\nexport class AppComponent {\r\n  title = 'application.client';\r\n}\r\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"flex-column h100 font-[inter] bg-neutral-100\">\r\n    <div class=\"sticky top-0 z-1\">\r\n        <app-navigation></app-navigation>\r\n    </div>\r\n\r\n    <div class=\"main-container overflow-auto\">\r\n        <router-outlet />\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "BookingFormComponent",
            "id": "component-BookingFormComponent-089041053a426a2bc0305449f67a639c8bdb65c1f03f810ab5fe2c14fda0c02b0218b502d75924ea4b8fd1cfbf0f639ba68c930832bbc51debf4bb62edbde34d",
            "file": "src/app/booking-form/booking-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-booking-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./booking-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "complete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "createBookingForm",
                    "defaultValue": "this.fb.group(\r\n    {\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      workspaceType: new FormControl<WorkspaceType | null>(null, {\r\n        validators: [Validators.required]\r\n      }),\r\n      seats: new FormControl<number | null>(null, {\r\n        validators: [Validators.required, Validators.min(1)]\r\n      }),\r\n      startDate: new FormControl<Date | null>(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0), {\r\n        validators: [Validators.required]\r\n      }),\r\n      endDate: new FormControl<Date | null>(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0), {\r\n        validators: [Validators.required]\r\n      }),\r\n      startTime: new FormControl<Date | null>(null, {\r\n        validators: [Validators.required]\r\n      }),\r\n      endTime: new FormControl<Date | null>(null, {\r\n        validators: [Validators.required]\r\n      })\r\n    }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "endTimeOptions",
                    "defaultValue": "this.timeSlotBoundaries.slice(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "errorOpened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "maxEndDate",
                    "defaultValue": "new Date(new Date().getFullYear() + 5, new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "maxStartDate",
                    "defaultValue": "new Date(new Date().getFullYear() + 5, new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "minEndDate",
                    "defaultValue": "new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "minStartDate",
                    "defaultValue": "new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "sentDto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreateBookingDto | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "startTimeOptions",
                    "defaultValue": "this.timeSlotBoundaries.slice(0, -1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "successOpened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 167
                },
                {
                    "name": "timeSlotBoundaries",
                    "defaultValue": "[\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 8, 0, 0), text: \"8:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 8, 30, 0), text: \"8:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 9, 0, 0), text: \"9:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 9, 30, 0), text: \"9:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 10, 0, 0), text: \"10:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 10, 30, 0), text: \"10:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 11, 0, 0), text: \"11:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 11, 30, 0), text: \"11:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 12, 0, 0), text: \"12:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 12, 30, 0), text: \"12:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 13, 0, 0), text: \"1:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 13, 30, 0), text: \"1:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 14, 0, 0), text: \"2:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 14, 30, 0), text: \"2:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 15, 0, 0), text: \"3:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 15, 30, 0), text: \"3:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 16, 0, 0), text: \"4:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 16, 30, 0), text: \"4:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 17, 0, 0), text: \"5:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 17, 30, 0), text: \"5:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 18, 0, 0), text: \"6:00 PM\" },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "workspaceTypeOptions",
                    "defaultValue": "[\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.OpenSpace, text: \"Open Space\" },\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.PrivateRoom, text: \"Private room\" },\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.MeetingRoom, text: \"Meeting room\" }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "workspaceTypes",
                    "defaultValue": "Object.values(WorkspaceType)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 162
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectedStartDateChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectedStartTimeChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectedWorkspaceTypeChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { WorkspaceType } from '../../models/WorkspaceType';\r\nimport { Option } from '../../models/Option';\r\nimport {  FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { CreateBookingDto } from '../../DTOs/CreateBookingDto';\r\nimport { ApiService } from '../api.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-booking-form',\r\n  templateUrl: './booking-form.component.html',\r\n  styleUrl: './booking-form.component.css',\r\n  standalone: false\r\n})\r\nexport class BookingFormComponent\r\n{\r\n  constructor(private fb: FormBuilder, private api: ApiService) { }\r\n\r\n  workspaceTypeOptions = [\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.OpenSpace, text: \"Open Space\" },\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.PrivateRoom, text: \"Private room\" },\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.MeetingRoom, text: \"Meeting room\" }\r\n  ];\r\n  timeSlotBoundaries = [\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 8, 0, 0), text: \"8:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 8, 30, 0), text: \"8:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 9, 0, 0), text: \"9:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 9, 30, 0), text: \"9:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 10, 0, 0), text: \"10:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 10, 30, 0), text: \"10:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 11, 0, 0), text: \"11:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 11, 30, 0), text: \"11:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 12, 0, 0), text: \"12:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 12, 30, 0), text: \"12:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 13, 0, 0), text: \"1:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 13, 30, 0), text: \"1:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 14, 0, 0), text: \"2:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 14, 30, 0), text: \"2:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 15, 0, 0), text: \"3:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 15, 30, 0), text: \"3:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 16, 0, 0), text: \"4:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 16, 30, 0), text: \"4:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 17, 0, 0), text: \"5:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 17, 30, 0), text: \"5:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 18, 0, 0), text: \"6:00 PM\" },\r\n  ];\r\n  startTimeOptions = this.timeSlotBoundaries.slice(0, -1);\r\n  endTimeOptions = this.timeSlotBoundaries.slice(1);\r\n\r\n  @Input() type?: string\r\n  @Input() id!: string\r\n\r\n  onSelectedWorkspaceTypeChange()\r\n  {\r\n    this.createBookingForm.patchValue({\r\n      seats: null\r\n    });\r\n\r\n  }\r\n  onSelectedStartTimeChange()\r\n  {\r\n    if (this.createBookingForm.value.startTime != undefined) {\r\n      let option = this.timeSlotBoundaries.find((x) => x.value.getTime() == this.createBookingForm.value.startTime?.getTime());\r\n      if (option != undefined) {\r\n        this.endTimeOptions = this.timeSlotBoundaries.slice(this.timeSlotBoundaries.indexOf(option) + 1);\r\n      }\r\n      if (this.createBookingForm.value.endTime != undefined) {\r\n        if (this.createBookingForm.value.startTime >= this.createBookingForm.value.endTime) {\r\n          this.createBookingForm.patchValue({\r\n            endTime: this.endTimeOptions[0].value\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  minStartDate: Date = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n  maxStartDate: Date = new Date(new Date().getFullYear() + 5, new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n  minEndDate: Date = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n  maxEndDate: Date = new Date(new Date().getFullYear() + 5, new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n\r\n\r\n  onSelectedStartDateChange()\r\n  {\r\n    if (this.createBookingForm.value.startDate != undefined) {\r\n      if (this.createBookingForm.value.workspaceType != undefined) {\r\n        if (this.createBookingForm.value.workspaceType == WorkspaceType.MeetingRoom) {\r\n          this.minEndDate = this.createBookingForm.value.startDate;\r\n          this.maxEndDate = this.createBookingForm.value.startDate;\r\n        }\r\n        else {\r\n          this.minEndDate = this.createBookingForm.value.startDate;\r\n          this.maxEndDate = new Date(this.createBookingForm.value.startDate.getFullYear(), this.createBookingForm.value.startDate.getMonth(), this.createBookingForm.value.startDate.getDate() + 29, 12, 0, 0);\r\n        }\r\n      }\r\n      else {\r\n        this.minEndDate = this.createBookingForm.value.startDate;\r\n        this.maxEndDate = new Date(this.createBookingForm.value.startDate.getFullYear(), this.createBookingForm.value.startDate.getMonth(), this.createBookingForm.value.startDate.getDate() + 29, 12, 0, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  createBookingForm = this.fb.group(\r\n    {\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      workspaceType: new FormControl<WorkspaceType | null>(null, {\r\n        validators: [Validators.required]\r\n      }),\r\n      seats: new FormControl<number | null>(null, {\r\n        validators: [Validators.required, Validators.min(1)]\r\n      }),\r\n      startDate: new FormControl<Date | null>(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0), {\r\n        validators: [Validators.required]\r\n      }),\r\n      endDate: new FormControl<Date | null>(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0), {\r\n        validators: [Validators.required]\r\n      }),\r\n      startTime: new FormControl<Date | null>(null, {\r\n        validators: [Validators.required]\r\n      }),\r\n      endTime: new FormControl<Date | null>(null, {\r\n        validators: [Validators.required]\r\n      })\r\n    }\r\n  );\r\n\r\n  get name()\r\n  {\r\n    return this.createBookingForm.get('name')!;\r\n  }\r\n  get email()\r\n  {\r\n    return this.createBookingForm.get('email')!;\r\n  }\r\n  get workspaceType()\r\n  {\r\n    return this.createBookingForm.get('workspaceType')!;\r\n  }\r\n  get seats()\r\n  {\r\n    return this.createBookingForm.get('seats')!;\r\n  }\r\n  get startDate()\r\n  {\r\n    return this.createBookingForm.get('startDate')!;\r\n  }\r\n  get endDate()\r\n  {\r\n    return this.createBookingForm.get('endDate')!;\r\n  }\r\n  get startTime()\r\n  {\r\n    return this.createBookingForm.get('startTime')!;\r\n  }\r\n  get endTime()\r\n  {\r\n    return this.createBookingForm.get('endTime')!;\r\n  }\r\n\r\n  workspaceTypes = Object.values(WorkspaceType);\r\n\r\n  errors: string[] = [];\r\n  complete = false;\r\n  sentDto: CreateBookingDto | undefined;\r\n  successOpened = false;\r\n  errorOpened = false;\r\n\r\n  onSubmit()\r\n  {\r\n    this.errors = [];\r\n    if (this.createBookingForm.valid) {\r\n      let dto = <CreateBookingDto>{\r\n        coworkingId: +this.id,\r\n        name: this.createBookingForm.value.name!,\r\n        email: this.createBookingForm.value.email,\r\n        workspaceType: this.createBookingForm.value.workspaceType,\r\n        seats: this.createBookingForm.value.seats,\r\n        startDate: this.createBookingForm.value.startDate?.toISOString().slice(0, 10),\r\n        endDate: this.createBookingForm.value.endDate?.toISOString().slice(0, 10),\r\n        startTime: this.createBookingForm.value.startTime?.toTimeString().slice(0, 8),\r\n        endTime: this.createBookingForm.value.endTime?.toTimeString().slice(0, 8),\r\n      }\r\n      this.sentDto = dto;\r\n      this.api.CreateBooking(dto).subscribe({\r\n        complete: () => { this.successOpened = true },\r\n        error: (error: HttpErrorResponse) =>\r\n        {\r\n          if (error?.error?.errors != undefined) {\r\n            let errorNames = Object.getOwnPropertyNames(error.error.errors)\r\n            if (errorNames.length == 1) {\r\n              this.errors = [error?.error?.errors[errorNames[0]]];\r\n            }\r\n            else {\r\n              for (var i = 0; i < errorNames.length; i++) {\r\n                this.errors.push(`${errorNames[i]}: ${error?.error?.errors[errorNames[i]]}`)\r\n              }\r\n            }\r\n          }\r\n          this.errorOpened = true\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnInit()\r\n  {\r\n    //if (this.id != undefined && +this.id != undefined) {\r\n    //  this.workspaceGroups$ = this.api.GetWorkspaces(+this.id);\r\n    //}\r\n    if (this.type != undefined && this.type in WorkspaceType) {\r\n      switch (this.type) {\r\n        case (\"0\"):\r\n          this.createBookingForm.patchValue({\r\n          workspaceType: WorkspaceType.OpenSpace\r\n        });\r\n          break;\r\n        case (\"1\"):\r\n          this.createBookingForm.patchValue({\r\n          workspaceType: WorkspaceType.PrivateRoom\r\n        }); break;\r\n        case (\"2\"):\r\n          this.createBookingForm.patchValue({\r\n          workspaceType: WorkspaceType.MeetingRoom\r\n        });\r\n          break;\r\n      }\r\n    }\r\n    if (this.createBookingForm.value.startDate != undefined) {\r\n      if (this.createBookingForm.value.workspaceType != undefined) {\r\n        if (this.createBookingForm.value.workspaceType == WorkspaceType.MeetingRoom) {\r\n          this.minEndDate = this.createBookingForm.value.startDate;\r\n          this.maxEndDate = this.createBookingForm.value.startDate;\r\n        }\r\n        else {\r\n          this.minEndDate = this.createBookingForm.value.startDate;\r\n          this.maxEndDate = new Date(this.createBookingForm.value.startDate.getFullYear(), this.createBookingForm.value.startDate.getMonth(), this.createBookingForm.value.startDate.getDate() + 29, 12, 0, 0);\r\n        }\r\n      }\r\n      else {\r\n        this.minEndDate = this.createBookingForm.value.startDate;\r\n        this.maxEndDate = new Date(this.createBookingForm.value.startDate.getFullYear(), this.createBookingForm.value.startDate.getMonth(), this.createBookingForm.value.startDate.getDate() + 29, 12, 0, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./booking-form.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "",
                        "line": 129
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 133
                    }
                },
                "workspaceType": {
                    "name": "workspaceType",
                    "getSignature": {
                        "name": "workspaceType",
                        "type": "",
                        "returnType": "",
                        "line": 137
                    }
                },
                "seats": {
                    "name": "seats",
                    "getSignature": {
                        "name": "seats",
                        "type": "",
                        "returnType": "",
                        "line": 141
                    }
                },
                "startDate": {
                    "name": "startDate",
                    "getSignature": {
                        "name": "startDate",
                        "type": "",
                        "returnType": "",
                        "line": 145
                    }
                },
                "endDate": {
                    "name": "endDate",
                    "getSignature": {
                        "name": "endDate",
                        "type": "",
                        "returnType": "",
                        "line": 149
                    }
                },
                "startTime": {
                    "name": "startTime",
                    "getSignature": {
                        "name": "startTime",
                        "type": "",
                        "returnType": "",
                        "line": 153
                    }
                },
                "endTime": {
                    "name": "endTime",
                    "getSignature": {
                        "name": "endTime",
                        "type": "",
                        "returnType": "",
                        "line": 157
                    }
                }
            },
            "templateData": "<div class=\"flex flex-col p-20 gap-10\">\r\n    <div class=\"flex flex-row gap-1\">\r\n        <img class=\"size-6\" src=\"assets\\chevron-left.svg\" />\r\n        <div class=\"text-blue-500\" routerLink=\"/coworking-details/{{id}}\" routerLinkActive=\"active\">Go back</div>\r\n    </div>\r\n    <div class=\"text-4xl\">Book your workspace</div>\r\n    <div class=\"flex flex-row gap-6\" [formGroup]=\"createBookingForm\">\r\n        <div class=\"flex flex-col gap-8 p-4 bg-white rounded-2xl grow\">\r\n            <div class=\"text-3xl\">Reservation details</div>\r\n            <div>\r\n                <div>Name</div>\r\n                <input type=\"text\" placeholder=\"Name\" formControlName=\"name\" class=\"border border-gray-300 text-gray-900 text-sm rounded-lg focus:outline-indigo-600 focus:border-blue-500 block w-full p-2.5\" />\r\n                @if (name.invalid && (name.dirty || name.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (name.hasError('required')) {\r\n                    <div>\r\n                        Name is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div>Email</div>\r\n                <input type=\"email\" placeholder=\"Email\" formControlName=\"email\" class=\"border border-gray-300 text-gray-900 text-sm rounded-lg focus:outline-indigo-600 focus:border-blue-500 block w-full p-2.5\" />\r\n                @if (email.invalid && (email.dirty || email.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (email.hasError('required')) {\r\n                    <div>\r\n                        Email is required.\r\n                    </div>\r\n                    }\r\n                    @if (email.hasError('email')) {\r\n                    <div>\r\n                        Email is not in correct format.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div>Workspace type</div>\r\n                <app-dropdown [options]=\"workspaceTypeOptions\" formControlName=\"workspaceType\" (valueChange)=\"onSelectedWorkspaceTypeChange(); onSelectedStartDateChange()\"></app-dropdown>\r\n                @if (workspaceType.invalid && (workspaceType.dirty || workspaceType.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (workspaceType.hasError('required')) {\r\n                    <div>\r\n                        Workspace type is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            @if(createBookingForm.value.workspaceType == workspaceTypeOptions[0].value){\r\n            <div class=\"flex flex-col gap-3\">\r\n                <div>How many desks you need?</div>\r\n                <div class=\"flex flex-col gap-2\">\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad1\" name=\"seats\" [value]=\"1\" formControlName=\"seats\">\r\n                        <label for=\"rad1\"><b>1 desk</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad2\" name=\"seats\" [value]=\"2\" formControlName=\"seats\">\r\n                        <label for=\"rad2\"><b>2 desks</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad3\" name=\"seats\" [value]=\"3\" formControlName=\"seats\">\r\n                        <label for=\"rad3\"><b>3 desks</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad4\" name=\"seats\" [value]=\"4\" formControlName=\"seats\">\r\n                        <label for=\"rad4\"><b>4 desks</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad5\" name=\"seats\" [value]=\"5\" formControlName=\"seats\">\r\n                        <label for=\"rad5\"><b>5 desks</b></label>\r\n                    </div>\r\n                </div>\r\n                @if (seats.invalid && (seats.dirty || seats.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (seats.hasError('required')) {\r\n                    <div>\r\n                        Desk count is required.\r\n                    </div>\r\n                    }\r\n                    @if (seats.hasError('min')) {\r\n                    <div>\r\n                        Desk count must be more than 0.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            }\r\n            @if(createBookingForm.value.workspaceType == workspaceTypeOptions[1].value){\r\n            <div class=\"flex flex-col gap-3\">\r\n                <div>What room size do you need?</div>\r\n                <div class=\"flex flex-col gap-2\">\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad1\" name=\"seats\" [value]=\"1\" formControlName=\"seats\">\r\n                        <label for=\"rad1\"> Room for <b>1 person</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad2\" name=\"seats\" [value]=\"2\" formControlName=\"seats\">\r\n                        <label for=\"rad2\"> Room for <b>2 people</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad3\" name=\"seats\" [value]=\"5\" formControlName=\"seats\">\r\n                        <label for=\"rad3\"> Room for <b>5 people</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad4\" name=\"seats\" [value]=\"10\" formControlName=\"seats\">\r\n                        <label for=\"rad4\"> Room for <b>10 people</b></label>\r\n                    </div>\r\n                </div>\r\n                @if (seats.invalid && (seats.dirty || seats.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (seats.hasError('required')) {\r\n                    <div>\r\n                        Room size is required.\r\n                    </div>\r\n                    }\r\n                    @if (seats.hasError('min')) {\r\n                    <div>\r\n                        Room size must be more than 0.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            }\r\n            @if(createBookingForm.value.workspaceType == workspaceTypeOptions[2].value){\r\n            <div class=\"flex flex-col gap-3\">\r\n                <div>What room size do you need?</div>\r\n                <div class=\"flex flex-col gap-2\">\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad1\" name=\"seats\" [value]=\"10\" formControlName=\"seats\">\r\n                        <label for=\"rad1\"> Room for <b>10 people</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad2\" name=\"seats\" [value]=\"20\" formControlName=\"seats\">\r\n                        <label for=\"rad2\"> Room for <b>20 people</b></label>\r\n                    </div>\r\n                </div>\r\n                @if (seats.invalid && (seats.dirty || seats.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (seats.hasError('required')) {\r\n                    <div>\r\n                        Room size is required.\r\n                    </div>\r\n                    }\r\n                    @if (seats.hasError('min')) {\r\n                    <div>\r\n                        Room size must be more than 0.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n        <div class=\"flex flex-col gap-8 p-4 bg-white rounded-2xl grow\">\r\n            <div class=\"text-3xl\">Choose date and time</div>\r\n            <div>\r\n                <div class=\"text-2xl\">Start Date</div>\r\n                <app-date-picker [minDate]=\"minStartDate\" [maxDate]=\"maxStartDate\" formControlName=\"startDate\" (valueChange)=\"onSelectedStartDateChange()\"></app-date-picker>\r\n                @if (startDate.invalid && (startDate.dirty || startDate.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (startDate.hasError('required')) {\r\n                    <div>\r\n                        Start Date is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div class=\"text-2xl\">End Date</div>\r\n                <app-date-picker [minDate]=\"minEndDate\" [maxDate]=\"maxEndDate\" formControlName=\"endDate\"></app-date-picker>\r\n                @if (endDate.invalid && (endDate.dirty || endDate.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (endDate.hasError('required')) {\r\n                    <div>\r\n                        End Date is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div class=\"text-2xl\">Start time</div>\r\n                <app-dropdown [options]=\"startTimeOptions\" formControlName=\"startTime\" (valueChange)=\"onSelectedStartTimeChange()\"></app-dropdown>\r\n                @if (startTime.invalid && (startTime.dirty || startTime.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (startTime.hasError('required')) {\r\n                    <div>\r\n                        Start time is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div class=\"text-2xl\">End time</div>\r\n                <app-dropdown [options]=\"endTimeOptions\" formControlName=\"endTime\"></app-dropdown>\r\n                @if (endTime.invalid && (endTime.dirty || endTime.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (endTime.hasError('required')) {\r\n                    <div>\r\n                        End time is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div class=\"self-stretch\">\r\n                <button [disabled]=\"!createBookingForm.valid\" class=\"bg-blue-600 text-white px-6 py-3 w-full rounded-lg disabled:bg-neutral-600\" (click)=\"onSubmit()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <app-modal [(opened)]=\"successOpened\">\r\n        <div class=\"flex flex-col gap-4 p-10 bg-white rounded-2xl\">\r\n            <div class=\"flex flex-row\">\r\n                <div>\r\n                    <img class=\"size-20\" src=\"assets\\Icon Ok.svg\" />\r\n                </div>\r\n                <div class=\"flex-grow-1\"></div>\r\n                <div (click)=\"successOpened=false\">\r\n                    <img width=\"36\" height=\"36\" src=\"assets\\x.svg\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"text-3xl\">\r\n                You're all set!\r\n            </div>\r\n            <div class=\"text-neutral-500\">\r\n                Your {{workspaceType.value==0?\"desk\":\"room\"}} for {{seats.value}} {{seats.value==1?\"person\":\"people\"}} is booked from <b class=\"text-black\">{{startDate.value?.toISOString()?.slice(0,10)}} to {{endDate.value?.toISOString()?.slice(0,10)}}</b>. A confirmation has been sent to your email <b class=\"text-black\">{{email.value}}</b>\r\n            </div>\r\n            <div>\r\n                <button class=\"text-center bg-blue-600 text-white px-6 rounded-lg py-2\" (click)=\"successOpened=false;\" routerLink=\"/my-booking\" routerLinkActive=\"active\">\r\n                    My bookings\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </app-modal>\r\n    <app-modal [(opened)]=\"errorOpened\">\r\n        <div class=\"flex flex-col gap-4 p-10 bg-white rounded-2xl\">\r\n            <div class=\"flex flex-row\">\r\n                <div>\r\n                    <img class=\"size-20\" src=\"assets\\Icon Cancel.svg\" />\r\n                </div>\r\n                <div class=\"flex-grow-1\"></div>\r\n                <div (click)=\"errorOpened=false\">\r\n                    <img width=\"36\" height=\"36\" src=\"assets\\x.svg\" />\r\n                </div>\r\n            </div>\r\n            @for(error of errors;track i ;let i = $index){\r\n            <div class=\"text-3xl\">\r\n                {{error}}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button class=\"text-center bg-blue-600 text-white px-6 rounded-lg py-2\" (click)=\"errorOpened=false\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </app-modal>\r\n</div>\r\n"
        },
        {
            "name": "CoworkingDetailsComponent",
            "id": "component-CoworkingDetailsComponent-fb8c942eb7b08d04783e4101a7f834f892469d65cec1f35bce6e99cd2556a4495a5fd8c06cfeeb8f0c20b08ab4f61c933d4a2b93f610acb4dd0cc90f50e92297",
            "file": "src/app/coworking-details/coworking-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-coworking-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./coworking-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "workspaceGroups$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<WorkspaceGroupDto[]>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "getAmenitySrc",
                    "args": [
                        {
                            "name": "amenity",
                            "type": "Amenity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "amenity",
                            "type": "Amenity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "type",
                            "type": "WorkspaceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "WorkspaceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImageSrcs",
                    "args": [
                        {
                            "name": "type",
                            "type": "WorkspaceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "WorkspaceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "type",
                            "type": "WorkspaceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "WorkspaceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Amenity } from '../../models/Amenity';\r\nimport { ApiService } from '../api.service';\r\nimport { Observable } from 'rxjs';\r\nimport { WorkspaceType } from '../../models/WorkspaceType';\r\nimport { WorkspaceGroupDto } from '../../DTOs/GetWorkspaces/WorkspaceGroupDto';\r\n\r\n@Component({\r\n  selector: 'app-coworking-details',\r\n  templateUrl: './coworking-details.component.html',\r\n  styleUrl: './coworking-details.component.css',\r\n  standalone: false\r\n})\r\nexport class CoworkingDetailsComponent implements OnInit\r\n{\r\n  constructor(private api: ApiService)  { }\r\n\r\n  getAmenitySrc(amenity: Amenity): string\r\n  {\r\n    switch (amenity) {\r\n      case Amenity.Coffee:\r\n        return \"assets\\\\coffee.svg\"\r\n      case Amenity.GameRoom:\r\n        return \"assets\\\\device-gamepad-2.svg\"\r\n      case Amenity.WiFi:\r\n        return \"assets\\\\wifi.svg\"\r\n      case Amenity.Conditioner:\r\n        return \"assets\\\\air-conditioning.svg\"\r\n      case Amenity.Microphone:\r\n        return \"assets\\\\microphone.svg\"\r\n      case Amenity.Headphones:\r\n        return \"assets\\\\headphones.svg\"\r\n      default:\r\n        return \"\"\r\n    }\r\n  }\r\n\r\n  @Input() id? :string\r\n\r\n  workspaceGroups$?: Observable<WorkspaceGroupDto[]>;\r\n\r\n  getImageSrcs(type: WorkspaceType): string[]\r\n  {\r\n    const images = [['assets\\\\Open Space 1.jpg', 'assets\\\\Open Space 2.jpg', 'assets\\\\Open Space 3.jpg', 'assets\\\\Open Space 4.jpg'], ['assets\\\\Private Room 1.jpg', 'assets\\\\Private Room 2.jpg', 'assets\\\\Private Room 3.jpg'], ['assets\\\\Meeting Room 1.jpg', 'assets\\\\Meeting Room 2.jpg', 'assets\\\\Meeting Room 3.jpg', 'assets\\\\Meeting Room 4.jpg']];\r\n    return images[type];\r\n  }\r\n\r\n  getName(type: WorkspaceType): string\r\n  {\r\n    const names = [\"Open space\", \"Private Rooms\",\"Meeting rooms\"];\r\n    return names[type];\r\n  }\r\n\r\n  getDescription(type: WorkspaceType): string\r\n  {\r\n    const descriptions = [\"A vibrant shared area perfect for freelancers or small teams who enjoy a collaborative atmosphere. Choose any available desk and get to work with flexibility and ease.\", \"Ideal for focused work, video calls, or small team huddles. These fully enclosed rooms offer privacy and come in a variety of sizes to fit your needs.\", \"Designed for productive meetings, workshops, or client presentations. Equipped with screens, whiteboards, and comfortable seating to keep your sessions running smoothly.\"];\r\n    return descriptions[type];\r\n  }\r\n\r\n  ngOnInit()\r\n  {\r\n    if (this.id != undefined && +this.id != undefined) {\r\n      this.workspaceGroups$ = this.api.GetWorkspaces(+this.id);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./coworking-details.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex flex-col p-20 gap-10\">\r\n    <div class=\"flex flex-row gap-1\">\r\n        <img class=\"size-6\" src=\"assets\\chevron-left.svg\" />\r\n        <div class=\"text-blue-500\" routerLink=\"/coworking-list\" routerLinkActive=\"active\">Go back</div>\r\n    </div>\r\n    <div class=\"text-4xl\">Available workspaces</div>\r\n    <div class=\"flex flex-col gap-6\" *ngIf=\"workspaceGroups$|async as workspaceGroups\">\r\n        @for( workspaceGroup of workspaceGroups;track workspaceGroup.workspaceType; let  i = $index){\r\n        <div class=\"flex flex-row gap-8 p-4 bg-white rounded-2xl\">\r\n            <div class=\"w-4/10\">\r\n                <app-photo-gallery [photoSrcs]=\"getImageSrcs(workspaceGroup.workspaceType)\">\r\n                </app-photo-gallery>\r\n            </div>\r\n            <div class=\"flex flex-col py-3 gap-8\">\r\n                <div class=\"flex flex-row gap-3\">\r\n                    <div class=\"flex flex-col gap-3\">\r\n                        <div class=\"text-3xl\">{{getName(workspaceGroup.workspaceType)}}</div>\r\n                        <div class=\"text-neutral-500\">{{getDescription(workspaceGroup.workspaceType)}}</div>\r\n                    </div>\r\n                    <div>\r\n                        <button class=\"bg-blue-600 text-white px-6 rounded-lg h-12 w-45\" routerLink=\"/booking-form/{{id}}/{{workspaceGroup.workspaceType}}\" routerLinkActive=\"active\">Book now</button>\r\n                    </div>\r\n                </div>\r\n                @if(workspaceGroup.workspaceType==0){\r\n                <div class=\"flex flex-col\">\r\n                    <div class=\"flex flex-row gap-x-20 gap-y-3 flex-wrap\">\r\n                        <div class=\"flex flex-col\">\r\n                            <div class=\"text-lg\">Amenities</div>\r\n                            <div class=\"flex flex-row flex-wrap gap-3\">\r\n                                @for( amenity of workspaceGroup.amenities;track amenity; let  i = $index){\r\n                                <div class=\"p-[10px] rounded-xl bg-[#F5F3FB]\">\r\n                                    <img class=\"size-6\" src=\"{{getAmenitySrc(amenity)}}\" />\r\n                                </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"flex flex-col\">\r\n                            <div class=\"text-lg\">Availability</div>\r\n                            <div class=\"flex flex-row gap-3 items-center\">\r\n                                <div class=\"p-[10px] rounded-xl bg-[#F5F3FB]\">\r\n                                    <img class=\"size-6\" src=\"assets\\armchair.svg\" />\r\n                                </div>\r\n                                <div class=\"text-lg\">{{workspaceGroup.freeRooms[0].rooms}} desk{{workspaceGroup.freeRooms[0].rooms==1?\"\":\"s\"}}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                }\r\n                @else{\r\n                <div class=\"flex flex-col\">\r\n                    <div class=\"flex flex-row gap-x-20 gap-y-3 flex-wrap\">\r\n                        <div class=\"flex flex-col\">\r\n                            <div class=\"text-lg\">Amenities</div>\r\n                            <div class=\"flex flex-row flex-wrap gap-3\">\r\n                                @for( amenity of workspaceGroup.amenities;track amenity; let  i = $index){\r\n                                <div class=\"p-[10px] rounded-xl bg-[#F5F3FB]\">\r\n                                    <img class=\"size-6\" src=\"{{getAmenitySrc(amenity)}}\" />\r\n                                </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"flex flex-col\">\r\n                            <div class=\"text-lg\">Capacity options</div>\r\n                            <div class=\"flex flex-row gap-3 items-center\">\r\n                                <div class=\"p-[10px] rounded-xl bg-[#F5F3FB]\">\r\n                                    <img class=\"size-6\" src=\"assets\\user.svg\" />\r\n                                </div>\r\n                                <div class=\"text-lg\">1, 2, 5, 10 people</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"flex flex-col gap-1\">\r\n                    <div class=\"text-lg\">Availability</div>\r\n                    @for( freeRoom of workspaceGroup.freeRooms;track freeRoom.capacity; let  i = $index){\r\n                    <div class=\"text-neutral-500\"><b class=\"text-black\">{{freeRoom.rooms}} room{{freeRoom.rooms==1?\"\":\"s\"}}</b> for {{freeRoom.capacity==1?freeRoom.capacity + \" person\":\"up to \"+freeRoom.capacity+\" people\"}}</div>\r\n                    }\r\n                </div>\r\n                }\r\n                <div *ngIf=\"workspaceGroup.bookings\" class=\"flex flex-col gap-3\">\r\n                    @for(booking of workspaceGroup.bookings;track booking.id; let  i = $index){\r\n                    <div class=\"flex flex-row gap-2 bg-[#EAF7EE] rounded-lg px-4 py-2\">\r\n                        <img class=\"size-6\" src=\"assets\\done.svg\" />\r\n                        <div>\r\n                            This workspace is already booked by you! {{booking.seats}} {{booking.seats==1?\"desk\":\"desks\"}} <b> {{booking.startDate}} to {{booking.endDate}}</b>\r\n                        </div>\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        }\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "CoworkingListComponent",
            "id": "component-CoworkingListComponent-530d0a513d2c0ddf8d456a1c083ac466913fad8c16eb48e980fb196ae7776dbb05ab7ed363388d837da648d370d6382d180c208c60438ca5d633fc68779e3e7e",
            "file": "src/app/coworking-list/coworking-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-coworking-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./coworking-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "coworkings$",
                    "defaultValue": "this.api.GetCoworkings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CoworkingDto[]>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getImageSrc",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoomCount",
                    "args": [
                        {
                            "name": "roomCount",
                            "type": "RoomCountDto[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomCount",
                            "type": "RoomCountDto[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ApiService } from '../api.service';\r\nimport { Observable } from 'rxjs';\r\nimport { CoworkingDto } from '../../DTOs/GetCoworkings/CoworkingDto';\r\nimport { RoomCountDto } from '../../DTOs/GetCoworkings/RoomCountDto';\r\nimport { WorkspaceType } from '../../models/WorkspaceType';\r\n\r\n@Component({\r\n  selector: 'app-coworking-list',\r\n  templateUrl: './coworking-list.component.html',\r\n  styleUrl: './coworking-list.component.css',\r\n  standalone: false\r\n})\r\nexport class CoworkingListComponent\r\n{\r\n  constructor(private api: ApiService) { }\r\n\r\n  coworkings$?: Observable<CoworkingDto[]> = this.api.GetCoworkings();\r\n\r\n  getImageSrc(index: number): string\r\n  {\r\n    const images = [\"assets\\\\Coworking 1.jpg\", \"assets\\\\Coworking 2.jpg\", \"assets\\\\Coworking 3.jpg\", \"assets\\\\Coworking 4.jpg\", \"assets\\\\Coworking 5.jpg\"];\r\n    return images[index % images.length];\r\n  }\r\n\r\n  getRoomCount(roomCount:RoomCountDto[])\r\n  {\r\n    let openSpace = roomCount.find(room => room.workspaceType == WorkspaceType.OpenSpace);\r\n    let privateRoom = roomCount.find(room => room.workspaceType == WorkspaceType.PrivateRoom);\r\n    let meetingRoom = roomCount.find(room => room.workspaceType == WorkspaceType.MeetingRoom);\r\n    return `🪑 ${openSpace?.rooms ?? 0} desk${openSpace?.rooms == 1 ? \"\" : \"s\"} · 🔒 ${privateRoom?.rooms ?? 0} private room${privateRoom?.rooms == 1 ? \"\" : \"s\"} · 👥 ${meetingRoom?.rooms ?? 0} meeting room${meetingRoom?.rooms == 1 ? \"\" : \"s\"}`;\r\n  }\r\n}\r\n",
            "styleUrl": "./coworking-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-col p-20 gap-10\">\r\n    <div class=\"text-4xl\">Available coworking spaces</div>\r\n    <div class=\"text-2xl text-neutral-500\">Browse and choose a workspace that fits your needs</div>\r\n    <div class=\"flex flex-col gap-6\" >\r\n        <ng-container *ngIf=\"(coworkings$ | async) as coworkings; else emptylist\">\r\n            @for(coworking of coworkings;track coworking.id; let  i = $index){\r\n            <div class=\"flex flex-row gap-8 p-4 bg-white rounded-2xl\">\r\n                <div class=\"grow-0 shrink-3 w-3/10\">\r\n                    <img class=\"aspect-4/3 object-cover rounded-2xl\" src=\"{{getImageSrc(i)}}\">\r\n                </div>\r\n                <div class=\"flex flex-col py-3 gap-8 shrink-7 grow-7\">\r\n                    <div class=\"flex flex-row gap-3\">\r\n                        <div class=\"flex flex-col gap-3\">\r\n                            <div class=\"text-3xl\">{{coworking.name}}</div>\r\n                            <div class=\"text-neutral-500\">{{coworking.description}}</div>\r\n                        </div>\r\n                        <div>\r\n                            <button class=\"bg-blue-600 text-white px-6 rounded-lg h-12 w-45\" routerLink=\"/coworking-details/{{coworking.id}}\" routerLinkActive=\"active\">View details</button>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex flex-col gap-3\">\r\n                        <div class=\"flex flex-row gap-3 items-center\">\r\n                            <div class=\"p-[10px] rounded-xl bg-[#F5F3FB]\">\r\n                                <img class=\"size-6\" src=\"assets\\map-pin.svg\" />\r\n                            </div>\r\n                            <div class=\"text-lg\">{{coworking.address}}</div>\r\n                        </div>\r\n                        <div class=\"flex flex-row gap-3 items-center\">\r\n                            <div class=\"p-[10px] rounded-xl bg-[#F5F3FB]\">\r\n                                <img class=\"size-6\" src=\"assets\\armchair.svg\" />\r\n                            </div>\r\n                            <div class=\"text-lg\">{{getRoomCount(coworking.roomCountDtos)}}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </ng-container>\r\n        <ng-template #emptylist>\r\n            <div class=\"p-4 bg-white rounded-2xl\">\r\n                <div class=\" flex flex-col gap-5 items-center p-10\">\r\n                    <div class=\"text-3xl\">👨‍💻</div>\r\n                    <div class=\"text-3xl\">No coworking spaces available at the moment</div>\r\n                    <div class=\"text-neutral-500\">Please check back later or try adjusting your filters</div>\r\n                    <div>\r\n                        <button class=\"bg-blue-600 text-white px-6 rounded-lg h-12\" routerLink=\"/coworking-list\" routerLinkActive=\"active\">Refresh list</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-d56b9abb5f70d00b65779111e187bd725542a983d350fddaefe88a6d90c42d7a08273118d4a2365a8793619ae2ec35c11e5e02fad55aa1634cf12dd76ed72a01",
            "file": "src/app/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-date-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "maxDate",
                    "defaultValue": "new Date(new Date().getFullYear() + 1, new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Date",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<Date>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlDir",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dayControl",
                    "defaultValue": "new FormControl<number>(0, {\r\n    validators: [Validators.required],\r\n    nonNullable: true\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "dayOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Option<number>[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "monthBaseOptions",
                    "defaultValue": "[\r\n    { value: 0, text: \"January\" },\r\n    { value: 1, text: \"February\" },\r\n    { value: 2, text: \"March\" },\r\n    { value: 3, text: \"April\" },\r\n    { value: 4, text: \"May\" },\r\n    { value: 5, text: \"June\" },\r\n    { value: 6, text: \"July\" },\r\n    { value: 7, text: \"August\" },\r\n    { value: 8, text: \"September\" },\r\n    { value: 9, text: \"October\" },\r\n    { value: 10, text: \"November\" },\r\n    { value: 11, text: \"December\" },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Option<number>[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "monthControl",
                    "defaultValue": "new FormControl<number>(0, {\r\n    validators: [Validators.required],\r\n    nonNullable: true\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "monthOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Option<number>[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "yearControl",
                    "defaultValue": "new FormControl<number>(0, {\r\n    validators: [Validators.required],\r\n    nonNullable: true\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "yearOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Option<number>[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "fixWrongDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDayChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMonthChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onYearChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDayDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMonthDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateYearDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Optional, Output, Self, SimpleChanges } from '@angular/core';\r\nimport { Option } from '../../models/Option';\r\nimport { ControlValueAccessor, FormControl, NgControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-date-picker',\r\n  templateUrl: './date-picker.component.html',\r\n  styleUrl: './date-picker.component.css',\r\n  standalone: false\r\n})\r\nexport class DatePickerComponent implements OnInit, ControlValueAccessor\r\n{\r\n  constructor(private elementRef: ElementRef, @Self() public controlDir: NgControl)\r\n  {\r\n    controlDir.valueAccessor = this;\r\n  }\r\n\r\n  monthBaseOptions: Option<number>[] = [\r\n    { value: 0, text: \"January\" },\r\n    { value: 1, text: \"February\" },\r\n    { value: 2, text: \"March\" },\r\n    { value: 3, text: \"April\" },\r\n    { value: 4, text: \"May\" },\r\n    { value: 5, text: \"June\" },\r\n    { value: 6, text: \"July\" },\r\n    { value: 7, text: \"August\" },\r\n    { value: 8, text: \"September\" },\r\n    { value: 9, text: \"October\" },\r\n    { value: 10, text: \"November\" },\r\n    { value: 11, text: \"December\" },\r\n  ]\r\n\r\n  @Input() minDate: Date = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n  @Input() maxDate: Date = new Date(new Date().getFullYear() + 1, new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n  @Input() value: Date = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0)\r\n  @Output() valueChange = new EventEmitter<Date>();\r\n\r\n  //year!: number\r\n  //month!: number\r\n  //day!: number\r\n\r\n  yearControl = new FormControl<number>(0, {\r\n    validators: [Validators.required],\r\n    nonNullable: true\r\n  });\r\n  monthControl = new FormControl<number>(0, {\r\n    validators: [Validators.required],\r\n    nonNullable: true\r\n  });\r\n  dayControl = new FormControl<number>(0, {\r\n    validators: [Validators.required],\r\n    nonNullable: true\r\n  });\r\n\r\n  yearOptions: Option<number>[] = [];\r\n  monthOptions: Option<number>[] = [];\r\n  dayOptions: Option<number>[] = [];\r\n\r\n\r\n\r\n  @Output() blur: EventEmitter<void> = new EventEmitter<void>();\r\n  onChange: (value: any) => void = () => { };\r\n  onTouched: () => void = () => { };\r\n\r\n\r\n  fixWrongDate()\r\n  {\r\n    let daysInMonth = new Date(this.yearControl.value, this.monthControl.value + 1, 0, 12, 0, 0).getDate();\r\n    if (this.dayControl.value > daysInMonth) {\r\n      this.dayControl.setValue(daysInMonth);\r\n    }\r\n\r\n    let minMonth;\r\n    let maxMonth;\r\n    if (this.minDate.getFullYear() == this.maxDate.getFullYear()) {\r\n      minMonth = this.minDate.getMonth();\r\n      maxMonth = this.maxDate.getMonth();\r\n    }\r\n    else if (this.value.getFullYear() == this.minDate.getFullYear()) {\r\n      minMonth = this.minDate.getMonth();\r\n      maxMonth = 11;\r\n    }\r\n    else if (this.value.getFullYear() == this.maxDate.getFullYear()) {\r\n      minMonth = 0;\r\n      maxMonth = this.maxDate.getMonth();\r\n    }\r\n    else {\r\n      minMonth = 0;\r\n      maxMonth = 11;\r\n    }\r\n    if (this.monthControl.value < minMonth) {\r\n      this.monthControl.setValue(minMonth);\r\n    }\r\n    else if (this.monthControl.value > maxMonth) {\r\n      this.monthControl.setValue(maxMonth);\r\n    }\r\n\r\n    let minDay;\r\n    let maxDay\r\n    if (this.minDate.getFullYear() == this.maxDate.getFullYear() && this.minDate.getMonth() == this.maxDate.getMonth()) {\r\n      minDay = this.minDate.getDate();\r\n      maxDay = this.maxDate.getDate();\r\n    }\r\n    else if (this.value.getFullYear() == this.minDate.getFullYear() && this.value.getMonth() == this.minDate.getMonth()) {\r\n      minDay = this.minDate.getDate();\r\n      maxDay = new Date(this.value.getFullYear(), this.value.getMonth() + 1, 0, 12, 0, 0).getDate();\r\n    }\r\n    else if (this.value.getFullYear() == this.maxDate.getFullYear() && this.value.getMonth() == this.maxDate.getMonth()) {\r\n      minDay = 1;\r\n      maxDay = this.maxDate.getDate();\r\n    }\r\n    else {\r\n      minDay = 1;\r\n      maxDay = new Date(this.value.getFullYear(), this.value.getMonth() + 1, 0, 12, 0, 0).getDate();\r\n    }\r\n    if (this.dayControl.value < minDay) {\r\n      this.dayControl.setValue(minDay);\r\n    }\r\n    else if (this.dayControl.value > maxDay) {\r\n      this.dayControl.setValue(maxDay);\r\n    }\r\n\r\n    let newDate = new Date(this.yearControl.value, this.monthControl.value, this.dayControl.value, 12, 0, 0);\r\n    if (newDate < this.minDate) {\r\n      this.yearControl.setValue(this.minDate.getFullYear());\r\n      this.monthControl.setValue(this.minDate.getMonth());\r\n      this.dayControl.setValue(this.minDate.getDate());\r\n      this.value = this.minDate;\r\n    }\r\n    else if (newDate > this.maxDate) {\r\n      this.yearControl.setValue(this.maxDate.getFullYear());\r\n      this.monthControl.setValue(this.maxDate.getMonth());\r\n      this.dayControl.setValue(this.maxDate.getDate());\r\n      this.value = this.maxDate;\r\n    }\r\n    else {\r\n      this.value = newDate;\r\n    }\r\n  }\r\n\r\n  onYearChanged()\r\n  {\r\n    this.fixWrongDate();\r\n this.updateMonthDropdown();\r\n    this.updateDayDropdown();\r\n    \r\n    this.onChange(this.value);\r\n    this.onTouched();\r\n    this.valueChange.emit(this.value);\r\n  }\r\n  onMonthChanged()\r\n  {\r\n    this.fixWrongDate();\r\n    this.updateDayDropdown();\r\n\r\n    this.onChange(this.value);\r\n    this.onTouched();\r\n    this.valueChange.emit(this.value);\r\n  }\r\n  onDayChanged()\r\n  {\r\n    this.fixWrongDate();\r\n\r\n    this.onChange(this.value);\r\n    this.onTouched();\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  updateYearDropdown()\r\n  {\r\n    this.yearOptions = [];\r\n    for (var i = this.minDate.getFullYear(); i <= this.maxDate.getFullYear(); i++) {\r\n      this.yearOptions.push(<Option<number>>{ value: i, text: i.toString() });\r\n    }\r\n  }\r\n  updateMonthDropdown()\r\n  {\r\n    this.monthOptions = [];\r\n    if (this.minDate.getFullYear() == this.maxDate.getFullYear()) {\r\n      this.monthOptions = this.monthBaseOptions.slice(this.minDate.getMonth(), this.maxDate.getMonth() + 1);\r\n    }\r\n    else if (this.value.getFullYear() == this.minDate.getFullYear()) {\r\n      this.monthOptions = this.monthBaseOptions.slice(this.minDate.getMonth());\r\n    }\r\n    else if (this.value.getFullYear() == this.maxDate.getFullYear()) {\r\n      this.monthOptions = this.monthBaseOptions.slice(0, this.maxDate.getMonth() + 1);\r\n    }\r\n    else {\r\n      this.monthOptions = this.monthBaseOptions.slice(0);\r\n    }\r\n  }\r\n  updateDayDropdown()\r\n  {\r\n    this.dayOptions = [];\r\n    if (this.minDate.getFullYear() == this.maxDate.getFullYear() && this.minDate.getMonth() == this.maxDate.getMonth()) {\r\n      for (var i = this.minDate.getDate(); i <= this.maxDate.getDate(); i++) {\r\n        this.dayOptions.push(<Option<number>>{ value: i, text: i.toString() });\r\n      }\r\n    }\r\n    else if (this.value.getFullYear() == this.minDate.getFullYear() && this.value.getMonth() == this.minDate.getMonth()) {\r\n      for (var i = this.minDate.getDate(); i <= new Date(this.value.getFullYear(), this.value.getMonth() + 1, 0, 12, 0, 0).getDate(); i++) {\r\n        this.dayOptions.push(<Option<number>>{ value: i, text: i.toString() });\r\n      }\r\n    }\r\n    else if (this.value.getFullYear() == this.maxDate.getFullYear() && this.value.getMonth() == this.maxDate.getMonth()) {\r\n      for (var i = 1; i <= this.maxDate.getDate(); i++) {\r\n        this.dayOptions.push(<Option<number>>{ value: i, text: i.toString() });\r\n      }\r\n    }\r\n    else {\r\n      for (var i = 1; i <= new Date(this.value.getFullYear(), this.value.getMonth() + 1, 0, 12, 0, 0).getDate(); i++) {\r\n        this.dayOptions.push(<Option<number>>{ value: i, text: i.toString() });\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges)\r\n  {\r\n\r\n    if (this.value < this.minDate) {\r\n      this.value = this.minDate\r\n      this.onChange(this.value);\r\n      this.onTouched();\r\n      this.valueChange.emit(this.value);\r\n    }\r\n    if (this.value > this.maxDate) {\r\n      this.value = this.maxDate\r\n      this.onChange(this.value);\r\n      this.onTouched();\r\n      this.valueChange.emit(this.value);\r\n\r\n    }\r\n\r\n    this.updateYearDropdown();\r\n    this.updateMonthDropdown();\r\n    this.updateDayDropdown();\r\n\r\n    this.yearControl.setValue(this.value.getFullYear());\r\n    this.monthControl.setValue(this.value.getMonth());\r\n    this.dayControl.setValue(this.value.getDate());\r\n  }\r\n\r\n\r\n  ngOnInit(): void\r\n  {\r\n    this.yearControl.setValue(this.value.getFullYear());\r\n    this.monthControl.setValue(this.value.getMonth());\r\n    this.dayControl.setValue(this.value.getDate());\r\n\r\n    if (this.value < this.minDate) {\r\n      this.value = this.minDate\r\n      this.onChange(this.value);\r\n      this.onTouched();\r\n      this.valueChange.emit(this.value);\r\n    }\r\n    if (this.value > this.maxDate) {\r\n      this.value = this.maxDate\r\n      this.onChange(this.value);\r\n      this.onTouched();\r\n      this.valueChange.emit(this.value);\r\n    }\r\n\r\n    this.updateYearDropdown();\r\n    this.updateMonthDropdown();\r\n    this.updateDayDropdown();\r\n  }\r\n\r\n  writeValue(value: any): void\r\n  {\r\n    if (value != undefined) {\r\n      this.value = value;\r\n\r\n      this.updateYearDropdown();\r\n      this.updateMonthDropdown();\r\n      this.updateDayDropdown();\r\n\r\n      this.yearControl.setValue(this.value.getFullYear());\r\n      this.monthControl.setValue(this.value.getMonth());\r\n      this.dayControl.setValue(this.value.getDate());\r\n    }\r\n  }\r\n\r\n  registerOnChange(onChange: (value: any) => void): void\r\n  {\r\n    this.onChange = onChange;\r\n  }\r\n\r\n  registerOnTouched(onTouched: () => void): void\r\n  {\r\n    this.onTouched = onTouched;\r\n  }\r\n}\r\n",
            "styleUrl": "./date-picker.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controlDir",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controlDir",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"flex flex-row gap-3\">\r\n    <app-dropdown [options]=\"dayOptions\" [formControl]=\"dayControl\"  (valueChange)=\"onDayChanged()\"></app-dropdown>\r\n    <app-dropdown [options]=\"monthOptions\" [formControl]=\"monthControl\"  (valueChange)=\"onMonthChanged()\"></app-dropdown>\r\n    <app-dropdown [options]=\"yearOptions\" [formControl]=\"yearControl\"  (valueChange)=\"onYearChanged()\"></app-dropdown>\r\n</div>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-89452a3d5f02967c8872dc3d43e7e678830542d75a1c88a89cea92673ae4198161b9c7476c747b6ddd0d8d81d1bee94972cb106ee9af1da385c2fc84e6d112d4",
            "file": "src/app/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Option<T>[]",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "T | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlDir",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "opened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Option<T> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "clickOutside",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectedChanged",
                    "args": [
                        {
                            "name": "option",
                            "type": "Option<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "Option<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Optional, Output, Self } from '@angular/core';\r\nimport { Option } from '../../models/Option';\r\nimport { ControlValueAccessor, NgControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-dropdown',\r\n  templateUrl: './dropdown.component.html',\r\n  styleUrl: './dropdown.component.css',\r\n  standalone: false\r\n})\r\nexport class DropdownComponent<T> implements OnInit, ControlValueAccessor\r\n{\r\n  constructor(private elementRef: ElementRef, @Self() public controlDir: NgControl)\r\n  {\r\n    controlDir.valueAccessor = this;\r\n  }\r\n\r\n  @Input() options: Option<T>[] = [];\r\n  opened: boolean = false;\r\n  @Input() value: T | undefined;\r\n  @Output() valueChange = new EventEmitter<T>();\r\n  selected: Option<T> | undefined;\r\n\r\n  onSelectedChanged(option: Option<T>)\r\n  {\r\n    this.value = option.value;\r\n    this.onChange(option.value);\r\n    this.onTouched();\r\n    this.opened = false;\r\n    this.valueChange.emit(option.value);\r\n    if (this.value instanceof Date) {\r\n      if (this.value != undefined) {\r\n        this.selected = this.options.find((x) => (x.value as Date).getTime() == (this.value as Date).getTime());\r\n      }\r\n    }\r\n    else {\r\n      if (this.value != undefined) {\r\n        this.selected = this.options.find((x) => x.value == this.value);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  toggleOpened()\r\n  {\r\n    this.opened = !this.opened;\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  clickOutside(event: Event)\r\n  {\r\n    if (!this.elementRef.nativeElement.contains(event.target)) {\r\n      this.opened = false;\r\n    }\r\n  }\r\n\r\n  @Output() blur: EventEmitter<void> = new EventEmitter<void>();\r\n  onChange: (value: any) => void = () => { };\r\n  onTouched: () => void = () => { };\r\n\r\n  ngOnInit(): void\r\n  {\r\n    const control = this.controlDir.control;\r\n    const validators = control?.validator\r\n      ? [control.validator, Validators.required]\r\n      : Validators.required;\r\n    control?.setValidators(validators);\r\n    if (this.value instanceof Date) {\r\n      if (this.value != undefined) {\r\n        this.selected = this.options.find((x) => (x.value as Date).getTime() == (this.value as Date).getTime());\r\n      }\r\n    }\r\n    else {\r\n      if (this.value != undefined) {\r\n        this.selected = this.options.find((x) => x.value == this.value);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges()\r\n  {\r\n    if (this.value instanceof Date) {\r\n      if (this.value != undefined) {\r\n        this.selected = this.options.find((x) => (x.value as Date).getTime() == (this.value as Date).getTime());\r\n      }\r\n    }\r\n    else {\r\n      if (this.value != undefined) {\r\n        this.selected = this.options.find((x) => x.value == this.value);\r\n      }\r\n    }\r\n  }\r\n\r\n  writeValue(value: any): void\r\n  {\r\n    if (value != undefined) {\r\n      //this.controlDir.control?.setValue(value, { emitEvent: false });\r\n      this.value = value;\r\n      if (this.value instanceof Date) {\r\n          this.selected = this.options.find((x) => (x.value as Date).getTime() == (this.value as Date).getTime());\r\n      }\r\n      else {\r\n          this.selected = this.options.find((x) => x.value == this.value);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  registerOnChange(onChange: (value: any) => void): void\r\n  {\r\n    this.onChange = onChange;\r\n  }\r\n\r\n  registerOnTouched(onTouched: () => void): void\r\n  {\r\n    this.onTouched = onTouched;\r\n  }\r\n}\r\n",
            "styleUrl": "./dropdown.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controlDir",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controlDir",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div>\r\n    <div class=\"relative mt-2\">\r\n        <button type=\"button\" class=\"grid w-full cursor-default grid-cols-1 rounded-md bg-white py-1.5 pr-2 pl-3 text-left text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6\" aria-haspopup=\"listbox\" aria-expanded=\"true\" aria-labelledby=\"listbox-label\" (click)=\"toggleOpened(); onTouched();\">\r\n            <span class=\"col-start-1 row-start-1 flex items-center gap-3 pr-6\">\r\n                <span class=\"h-6 block truncate\">{{selected?.text}}</span>\r\n            </span>\r\n            <img class=\"col-start-1 row-start-1 size-5 self-center justify-self-end text-gray-500 sm:size-4\" src=\"assets\\Chevron.svg\">\r\n        </button>\r\n        <ul [ngClass]=\"{'hidden': !opened}\" class=\" absolute z-10 mt-1 max-h-56 w-full min-w-fit  overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-hidden sm:text-sm\" tabindex=\"-1\" role=\"listbox\" aria-labelledby=\"listbox-label\">\r\n            @for   (option of options; track option; let  i = $index){\r\n            <li class=\"relative cursor-default py-2 text-gray-900 select-none hover:bg-indigo-600 hover:text-white hover:outline-hidden focus:bg-indigo-600 focus:text-white focus:outline-hidden\" role=\"option\" (click)=\"onSelectedChanged(option)\">\r\n                <div class=\"flex items-center\">\r\n                    <span [ngClass]=\"{'font-semibold': option.value == value, 'font-normal':option.value != value}\" class=\"ml-3 block font-normal\">{{option.text}}</span>\r\n                </div>\r\n            </li>\r\n            }\r\n        </ul>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "EditBookingFormComponent",
            "id": "component-EditBookingFormComponent-a4d0ca0997245329d577ffd8b1ee38e7830483cedfd1474de65c6fea085029bafc03973b4439c253c25a7c636ab12b8eb5e50add4137d133f7e717f4b59bc2e4",
            "file": "src/app/edit-booking-form/edit-booking-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-booking-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./edit-booking-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createBookingForm",
                    "defaultValue": "this.fb.group(\r\n    {\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      workspaceType: new FormControl<WorkspaceType | null>(null, {\r\n        validators: [Validators.required]\r\n      }),\r\n      seats: new FormControl<number | null>(null, {\r\n        validators: [Validators.required, Validators.min(1)]\r\n      }),\r\n      startDate: new FormControl<Date | null>(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0), {\r\n        validators: [Validators.required]\r\n      }),\r\n      endDate: new FormControl<Date | null>(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0), {\r\n        validators: [Validators.required]\r\n      }),\r\n      startTime: new FormControl<Date | null>(null, {\r\n        validators: [Validators.required]\r\n      }),\r\n      endTime: new FormControl<Date | null>(null, {\r\n        validators: [Validators.required]\r\n      })\r\n    }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "endTimeOptions",
                    "defaultValue": "this.timeSlotBoundaries.slice(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 170
                },
                {
                    "name": "errorOpened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "maxEndDate",
                    "defaultValue": "new Date(new Date().getFullYear() + 5, new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "maxStartDate",
                    "defaultValue": "new Date(new Date().getFullYear() + 5, new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "minEndDate",
                    "defaultValue": "new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "minStartDate",
                    "defaultValue": "new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "sentDto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EditBookingDto | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "startTimeOptions",
                    "defaultValue": "this.timeSlotBoundaries.slice(0, -1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "successOpened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "timeSlotBoundaries",
                    "defaultValue": "[\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 8, 0, 0), text: \"8:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 8, 30, 0), text: \"8:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 9, 0, 0), text: \"9:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 9, 30, 0), text: \"9:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 10, 0, 0), text: \"10:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 10, 30, 0), text: \"10:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 11, 0, 0), text: \"11:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 11, 30, 0), text: \"11:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 12, 0, 0), text: \"12:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 12, 30, 0), text: \"12:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 13, 0, 0), text: \"1:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 13, 30, 0), text: \"1:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 14, 0, 0), text: \"2:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 14, 30, 0), text: \"2:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 15, 0, 0), text: \"3:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 15, 30, 0), text: \"3:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 16, 0, 0), text: \"4:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 16, 30, 0), text: \"4:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 17, 0, 0), text: \"5:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 17, 30, 0), text: \"5:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 18, 0, 0), text: \"6:00 PM\" },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "workspaceTypeOptions",
                    "defaultValue": "[\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.OpenSpace, text: \"Open Space\" },\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.PrivateRoom, text: \"Private room\" },\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.MeetingRoom, text: \"Meeting room\" }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "workspaceTypes",
                    "defaultValue": "Object.values(WorkspaceType)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 164
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectedStartDateChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectedStartTimeChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectedWorkspaceTypeChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { WorkspaceType } from '../../models/WorkspaceType';\r\nimport { Option } from '../../models/Option';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { CreateBookingDto } from '../../DTOs/CreateBookingDto';\r\nimport { ApiService } from '../api.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { BookingDto } from '../../DTOs/GetBooking/BookingDto';\r\nimport { EditBookingDto } from '../../DTOs/EditBookingDto';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-edit-booking-form',\r\n  templateUrl: './edit-booking-form.component.html',\r\n  styleUrl: './edit-booking-form.component.css',\r\n  standalone: false\r\n})\r\nexport class EditBookingFormComponent\r\n{\r\n  constructor(private fb: FormBuilder, private api: ApiService, private router: Router) { }\r\n  workspaceTypeOptions = [\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.OpenSpace, text: \"Open Space\" },\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.PrivateRoom, text: \"Private room\" },\r\n    <Option<WorkspaceType>>{ value: WorkspaceType.MeetingRoom, text: \"Meeting room\" }\r\n  ];\r\n  //new Date(0,0,0,9,0,0).toTimeString()\r\n  timeSlotBoundaries = [\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 8, 0, 0), text: \"8:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 8, 30, 0), text: \"8:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 9, 0, 0), text: \"9:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 9, 30, 0), text: \"9:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 10, 0, 0), text: \"10:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 10, 30, 0), text: \"10:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 11, 0, 0), text: \"11:00 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 11, 30, 0), text: \"11:30 AM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 12, 0, 0), text: \"12:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 12, 30, 0), text: \"12:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 13, 0, 0), text: \"1:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 13, 30, 0), text: \"1:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 14, 0, 0), text: \"2:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 14, 30, 0), text: \"2:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 15, 0, 0), text: \"3:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 15, 30, 0), text: \"3:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 16, 0, 0), text: \"4:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 16, 30, 0), text: \"4:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 17, 0, 0), text: \"5:00 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 17, 30, 0), text: \"5:30 PM\" },\r\n    <Option<Date>>{ value: new Date(0, 0, 0, 18, 0, 0), text: \"6:00 PM\" },\r\n  ];\r\n  startTimeOptions = this.timeSlotBoundaries.slice(0, -1);\r\n  endTimeOptions = this.timeSlotBoundaries.slice(1);\r\n\r\n  @Input() id: string | undefined\r\n\r\n  onSelectedWorkspaceTypeChange()\r\n  {\r\n    this.createBookingForm.patchValue({\r\n      seats: null\r\n    });\r\n\r\n  }\r\n  onSelectedStartTimeChange()\r\n  {\r\n    if (this.createBookingForm.value.startTime != undefined) {\r\n      let option = this.timeSlotBoundaries.find((x) => x.value.getTime() == this.createBookingForm.value.startTime?.getTime());\r\n      if (option != undefined) {\r\n        this.endTimeOptions = this.timeSlotBoundaries.slice(this.timeSlotBoundaries.indexOf(option) + 1);\r\n      }\r\n      if (this.createBookingForm.value.endTime != undefined) {\r\n        if (this.createBookingForm.value.startTime >= this.createBookingForm.value.endTime) {\r\n          this.createBookingForm.patchValue({\r\n            endTime: this.endTimeOptions[0].value\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  minStartDate: Date = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n  maxStartDate: Date = new Date(new Date().getFullYear() + 5, new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n  minEndDate: Date = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n  maxEndDate: Date = new Date(new Date().getFullYear() + 5, new Date().getMonth(), new Date().getDate(), 12, 0, 0);\r\n\r\n\r\n  onSelectedStartDateChange()\r\n  {\r\n    if (this.createBookingForm.value.startDate != undefined) {\r\n      if (this.createBookingForm.value.workspaceType != undefined) {\r\n        if (this.createBookingForm.value.workspaceType == WorkspaceType.MeetingRoom) {\r\n          this.minEndDate = this.createBookingForm.value.startDate;\r\n          this.maxEndDate = this.createBookingForm.value.startDate;\r\n        }\r\n        else {\r\n          this.minEndDate = this.createBookingForm.value.startDate;\r\n          this.maxEndDate = new Date(this.createBookingForm.value.startDate.getFullYear(), this.createBookingForm.value.startDate.getMonth(), this.createBookingForm.value.startDate.getDate() + 29, 12, 0, 0);\r\n        }\r\n      }\r\n      else {\r\n        this.minEndDate = this.createBookingForm.value.startDate;\r\n        this.maxEndDate = new Date(this.createBookingForm.value.startDate.getFullYear(), this.createBookingForm.value.startDate.getMonth(), this.createBookingForm.value.startDate.getDate() + 29, 12, 0, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  createBookingForm = this.fb.group(\r\n    {\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      workspaceType: new FormControl<WorkspaceType | null>(null, {\r\n        validators: [Validators.required]\r\n      }),\r\n      seats: new FormControl<number | null>(null, {\r\n        validators: [Validators.required, Validators.min(1)]\r\n      }),\r\n      startDate: new FormControl<Date | null>(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0), {\r\n        validators: [Validators.required]\r\n      }),\r\n      endDate: new FormControl<Date | null>(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 12, 0, 0), {\r\n        validators: [Validators.required]\r\n      }),\r\n      startTime: new FormControl<Date | null>(null, {\r\n        validators: [Validators.required]\r\n      }),\r\n      endTime: new FormControl<Date | null>(null, {\r\n        validators: [Validators.required]\r\n      })\r\n    }\r\n  );\r\n\r\n  get name()\r\n  {\r\n    return this.createBookingForm.get('name')!;\r\n  }\r\n  get email()\r\n  {\r\n    return this.createBookingForm.get('email')!;\r\n  }\r\n  get workspaceType()\r\n  {\r\n    return this.createBookingForm.get('workspaceType')!;\r\n  }\r\n  get seats()\r\n  {\r\n    return this.createBookingForm.get('seats')!;\r\n  }\r\n  get startDate()\r\n  {\r\n    return this.createBookingForm.get('startDate')!;\r\n  }\r\n  get endDate()\r\n  {\r\n    return this.createBookingForm.get('endDate')!;\r\n  }\r\n  get startTime()\r\n  {\r\n    return this.createBookingForm.get('startTime')!;\r\n  }\r\n  get endTime()\r\n  {\r\n    return this.createBookingForm.get('endTime')!;\r\n  }\r\n\r\n  workspaceTypes = Object.values(WorkspaceType);\r\n\r\n\r\n\r\n\r\n\r\n  error: string | undefined;\r\n  errors: string[] = [];\r\n  sentDto: EditBookingDto | undefined;\r\n  successOpened = false;\r\n  errorOpened = false;\r\n\r\n  onSubmit()\r\n  {\r\n    if (this.id != undefined) {\r\n      this.errors = [];\r\n      if (this.createBookingForm.valid) {\r\n        let dto = <EditBookingDto>{\r\n          name: this.createBookingForm.value.name!,\r\n          email: this.createBookingForm.value.email,\r\n          workspaceType: this.createBookingForm.value.workspaceType,\r\n          seats: this.createBookingForm.value.seats,\r\n          startDate: this.createBookingForm.value.startDate?.toISOString().slice(0, 10),\r\n          endDate: this.createBookingForm.value.endDate?.toISOString().slice(0, 10),\r\n          startTime: this.createBookingForm.value.startTime?.toTimeString().slice(0, 8),\r\n          endTime: this.createBookingForm.value.endTime?.toTimeString().slice(0, 8),\r\n        }\r\n        this.sentDto = dto;\r\n        this.api.EditBooking(+(this.id), dto).subscribe({\r\n          complete: () => { this.router.navigate([\"/my-booking\"]) },\r\n          error: (error: HttpErrorResponse) =>\r\n          {\r\n            if (error?.error?.errors != undefined) {\r\n              let errorNames = Object.getOwnPropertyNames(error.error.errors)\r\n              if (errorNames.length == 1) {\r\n                this.errors = [error?.error?.errors[errorNames[0]]];\r\n              }\r\n              else {\r\n                for (var i = 0; i < errorNames.length; i++) {\r\n                  this.errors.push(`${errorNames[i]}: ${error?.error?.errors[errorNames[i]]}`)\r\n                }\r\n              }\r\n            }\r\n            this.errorOpened = true\r\n          },\r\n        });\r\n      }\r\n    }\r\n    else {\r\n      this.error = \"Id is required\";\r\n    }\r\n  }\r\n\r\n  ngOnInit()\r\n  {\r\n    if (this.id != undefined) {\r\n      let id = +this.id;\r\n      this.api.GetBooking(id).subscribe({\r\n        next: (x) =>\r\n        {\r\n          this.createBookingForm.setValue({\r\n            name: x.name,\r\n            email: x.email,\r\n            workspaceType: x.workspace.workspaceType,\r\n            seats: x.seats,\r\n            startDate: new Date(new Date(x.startDate).getFullYear(), new Date(x.startDate).getMonth(), new Date(x.startDate).getDate(), 12, 0, 0),\r\n            endDate: new Date(new Date(x.endDate).getFullYear(), new Date(x.endDate).getMonth(), new Date(x.endDate).getDate(), 12, 0, 0),\r\n            startTime: new Date(0, 0, 0, +(x.startTime.slice(0, 2)), +(x.startTime.slice(3, 5)), 0),\r\n            endTime: new Date(0, 0, 0, +(x.endTime.slice(0, 2)), +(x.endTime.slice(3, 5)), 0),\r\n          });\r\n\r\n          if (this.createBookingForm.value.startDate != undefined) {\r\n            if (this.createBookingForm.value.workspaceType != undefined) {\r\n              if (this.createBookingForm.value.workspaceType == WorkspaceType.MeetingRoom) {\r\n                this.minEndDate = this.createBookingForm.value.startDate;\r\n                this.maxEndDate = this.createBookingForm.value.startDate;\r\n              }\r\n              else {\r\n                this.minEndDate = this.createBookingForm.value.startDate;\r\n                this.maxEndDate = new Date(this.createBookingForm.value.startDate.getFullYear(), this.createBookingForm.value.startDate.getMonth(), this.createBookingForm.value.startDate.getDate() + 29, 12, 0, 0);\r\n              }\r\n            }\r\n            else {\r\n              this.minEndDate = this.createBookingForm.value.startDate;\r\n              this.maxEndDate = new Date(this.createBookingForm.value.startDate.getFullYear(), this.createBookingForm.value.startDate.getMonth(), this.createBookingForm.value.startDate.getDate() + 29, 12, 0, 0);\r\n            }\r\n          }\r\n        },\r\n        error: () =>\r\n        {\r\n          this.error = \"Error loading booking\";\r\n        },\r\n      });\r\n    }\r\n    else {\r\n      this.error = \"Id is required\";\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./edit-booking-form.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "",
                        "line": 131
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 135
                    }
                },
                "workspaceType": {
                    "name": "workspaceType",
                    "getSignature": {
                        "name": "workspaceType",
                        "type": "",
                        "returnType": "",
                        "line": 139
                    }
                },
                "seats": {
                    "name": "seats",
                    "getSignature": {
                        "name": "seats",
                        "type": "",
                        "returnType": "",
                        "line": 143
                    }
                },
                "startDate": {
                    "name": "startDate",
                    "getSignature": {
                        "name": "startDate",
                        "type": "",
                        "returnType": "",
                        "line": 147
                    }
                },
                "endDate": {
                    "name": "endDate",
                    "getSignature": {
                        "name": "endDate",
                        "type": "",
                        "returnType": "",
                        "line": 151
                    }
                },
                "startTime": {
                    "name": "startTime",
                    "getSignature": {
                        "name": "startTime",
                        "type": "",
                        "returnType": "",
                        "line": 155
                    }
                },
                "endTime": {
                    "name": "endTime",
                    "getSignature": {
                        "name": "endTime",
                        "type": "",
                        "returnType": "",
                        "line": 159
                    }
                }
            },
            "templateData": "<div class=\"flex flex-col p-20 gap-10\">\r\n    <div class=\"flex flex-row gap-1\">\r\n        <img class=\"size-6\" src=\"assets\\chevron-left.svg\" />\r\n        <div class=\"text-blue-500\" routerLink=\"/coworking-details\" routerLinkActive=\"active\">Go back</div>\r\n    </div>\r\n    <div class=\"text-4xl\">Edit your booking</div>\r\n    @if(error==undefined){\r\n    <div class=\"flex flex-row gap-6\" [formGroup]=\"createBookingForm\">\r\n        <div class=\"flex flex-col gap-8 p-4 bg-white rounded-2xl grow-1\">\r\n            <div class=\"text-3xl\">Reservation details</div>\r\n            <div>\r\n                <div>Name</div>\r\n                <input type=\"text\" placeholder=\"Name\" formControlName=\"name\" class=\"border border-gray-300 text-gray-900 text-sm rounded-lg focus:outline-indigo-600 focus:border-blue-500 block w-full p-2.5\" />\r\n                @if (name.invalid && (name.dirty || name.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (name.hasError('required')) {\r\n                    <div>\r\n                        Name is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div>Email</div>\r\n                <input type=\"email\" placeholder=\"Email\" formControlName=\"email\" class=\"border border-gray-300 text-gray-900 text-sm rounded-lg focus:outline-indigo-600 focus:border-blue-500 block w-full p-2.5\" />\r\n                @if (email.invalid && (email.dirty || email.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (email.hasError('required')) {\r\n                    <div>\r\n                        Email is required.\r\n                    </div>\r\n                    }\r\n                    @if (email.hasError('email')) {\r\n                    <div>\r\n                        Email is not in correct format.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div>Workspace type</div>\r\n                <app-dropdown [options]=\"workspaceTypeOptions\" formControlName=\"workspaceType\" (valueChange)=\"onSelectedWorkspaceTypeChange(); onSelectedStartDateChange()\"></app-dropdown>\r\n                @if (workspaceType.invalid && (workspaceType.dirty || workspaceType.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (workspaceType.hasError('required')) {\r\n                    <div>\r\n                        Workspace type is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            @if(createBookingForm.value.workspaceType == workspaceTypeOptions[0].value){\r\n            <div class=\"flex flex-col gap-3\">\r\n                <div>How many desks you need?</div>\r\n                <div class=\"flex flex-col gap-2\">\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad1\" name=\"seats\" [value]=\"1\" formControlName=\"seats\">\r\n                        <label for=\"rad1\"><b>1 desk</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad2\" name=\"seats\" [value]=\"2\" formControlName=\"seats\">\r\n                        <label for=\"rad2\"><b>2 desks</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad3\" name=\"seats\" [value]=\"3\" formControlName=\"seats\">\r\n                        <label for=\"rad3\"><b>3 desks</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad4\" name=\"seats\" [value]=\"4\" formControlName=\"seats\">\r\n                        <label for=\"rad4\"><b>4 desks</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad5\" name=\"seats\" [value]=\"5\" formControlName=\"seats\">\r\n                        <label for=\"rad5\"><b>5 desks</b></label>\r\n                    </div>\r\n                </div>\r\n                @if (seats.invalid && (seats.dirty || seats.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (seats.hasError('required')) {\r\n                    <div>\r\n                        Desk count is required.\r\n                    </div>\r\n                    }\r\n                    @if (seats.hasError('min')) {\r\n                    <div>\r\n                        Desk count must be more than 0.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            }\r\n            @if(createBookingForm.value.workspaceType == workspaceTypeOptions[1].value){\r\n            <div class=\"flex flex-col gap-3\">\r\n                <div>What room size do you need?</div>\r\n                <div class=\"flex flex-col gap-2\">\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad1\" name=\"seats\" [value]=\"1\" formControlName=\"seats\">\r\n                        <label for=\"rad1\"> Room for <b>1 person</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad2\" name=\"seats\" [value]=\"2\" formControlName=\"seats\">\r\n                        <label for=\"rad2\"> Room for <b>2 people</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad3\" name=\"seats\" [value]=\"5\" formControlName=\"seats\">\r\n                        <label for=\"rad3\"> Room for <b>5 people</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad4\" name=\"seats\" [value]=\"10\" formControlName=\"seats\">\r\n                        <label for=\"rad4\"> Room for <b>10 people</b></label>\r\n                    </div>\r\n                </div>\r\n                @if (seats.invalid && (seats.dirty || seats.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (seats.hasError('required')) {\r\n                    <div>\r\n                        Room size is required.\r\n                    </div>\r\n                    }\r\n                    @if (seats.hasError('min')) {\r\n                    <div>\r\n                        Room size must be more than 0.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            }\r\n            @if(createBookingForm.value.workspaceType == workspaceTypeOptions[2].value){\r\n            <div class=\"flex flex-col gap-3\">\r\n                <div>What room size do you need?</div>\r\n                <div class=\"flex flex-col gap-2\">\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad1\" name=\"seats\" [value]=\"10\" formControlName=\"seats\">\r\n                        <label for=\"rad1\"> Room for <b>10 people</b></label>\r\n                    </div>\r\n                    <div class=\"flex flex-row items-center gap-3\">\r\n                        <input class=\"size-5\" type=\"radio\" id=\"rad2\" name=\"seats\" [value]=\"20\" formControlName=\"seats\">\r\n                        <label for=\"rad2\"> Room for <b>20 people</b></label>\r\n                    </div>\r\n                </div>\r\n                @if (seats.invalid && (seats.dirty || seats.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (seats.hasError('required')) {\r\n                    <div>\r\n                        Room size is required.\r\n                    </div>\r\n                    }\r\n                    @if (seats.hasError('min')) {\r\n                    <div>\r\n                        Room size must be more than 0.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n        <div class=\"flex flex-col gap-8 p-4 bg-white rounded-2xl grow-1\">\r\n            <div class=\"text-3xl\">Choose date and time</div>\r\n            <div>\r\n                <div class=\"text-2xl\">Start Date</div>\r\n                <app-date-picker [minDate]=\"minStartDate\" [maxDate]=\"maxStartDate\" formControlName=\"startDate\" (valueChange)=\"onSelectedStartDateChange()\"></app-date-picker>\r\n                @if (startDate.invalid && (startDate.dirty || startDate.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (startDate.hasError('required')) {\r\n                    <div>\r\n                        Start Date is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div class=\"text-2xl\">End Date</div>\r\n                <app-date-picker [minDate]=\"minEndDate\" [maxDate]=\"maxEndDate\" formControlName=\"endDate\"></app-date-picker>\r\n                @if (endDate.invalid && (endDate.dirty || endDate.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (endDate.hasError('required')) {\r\n                    <div>\r\n                        End Date is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div class=\"text-2xl\">Start time</div>\r\n                <app-dropdown [options]=\"startTimeOptions\" formControlName=\"startTime\" (valueChange)=\"onSelectedStartTimeChange()\"></app-dropdown>\r\n                @if (startTime.invalid && (startTime.dirty || startTime.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (startTime.hasError('required')) {\r\n                    <div>\r\n                        Start time is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div class=\"text-2xl\">End time</div>\r\n                <app-dropdown [options]=\"endTimeOptions\" formControlName=\"endTime\"></app-dropdown>\r\n                @if (endTime.invalid && (endTime.dirty || endTime.touched)) {\r\n                <div class=\"text-red-500 text-sm\">\r\n                    @if (endTime.hasError('required')) {\r\n                    <div>\r\n                        End time is required.\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            <div class=\"self-stretch\">\r\n                <button [disabled]=\"!createBookingForm.valid\" class=\"bg-blue-600 text-white px-6 py-3 w-full rounded-lg disabled:bg-neutral-600\" (click)=\"onSubmit()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <app-modal [(opened)]=\"errorOpened\">\r\n        <div class=\"flex flex-col gap-4 p-10 bg-white rounded-2xl\">\r\n            <div class=\"flex flex-row\">\r\n                <div>\r\n                    <img class=\"size-20\" src=\"assets\\Icon Cancel.svg\" />\r\n                </div>\r\n                <div class=\"flex-grow-1\"></div>\r\n                <div (click)=\"errorOpened=false\">\r\n                    <img width=\"36\" height=\"36\" src=\"assets\\x.svg\" />\r\n                </div>\r\n            </div>\r\n            @for(error of errors;track i ;let i = $index){\r\n            <div class=\"text-3xl\">\r\n                {{error}}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button class=\"text-center bg-blue-600 text-white px-6 rounded-lg py-2\" (click)=\"errorOpened=false\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </app-modal>\r\n    }\r\n    @else{\r\n    <div class=\"text-3xl\">{{error}}</div>\r\n    }\r\n</div>\r\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-1f11748fa0e4f841948d83ccf85119bf3c62f3ccde8c5e17a8c4562f7628b677f6f07620ef7fd4a07f64029d4a90b5a60dc2e25987936468ed80c8c3f0830b6a",
            "file": "src/app/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "opened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickOutside",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './modal.component.html',\r\n  styleUrl: './modal.component.css',\r\n  standalone:false\r\n})\r\nexport class ModalComponent\r\n{\r\n  @Input() opened: boolean = false;\r\n  @Output() openedChange = new EventEmitter<boolean>();\r\n\r\n  clickOutside(event: MouseEvent)\r\n  {\r\n    if (event.target === event.currentTarget) {\r\n      this.opened = false;\r\n    }\r\n  }\r\n\r\n  close()\r\n  {\r\n    this.opened = false;\r\n  }\r\n\r\n\r\n}\r\n",
            "styleUrl": "./modal.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div [ngClass]=\"{hidden:!opened}\">\r\n    <div class=\"fixed top-0 left-0 right-0 bottom-0 bg-black/30 z-10\" (click)=\"clickOutside($event)\">\r\n        <div class=\"flex flex-col items-center p-20 max-w-full\" (click)=\"clickOutside($event)\">\r\n            <div class=\"max-w-full\" #content>\r\n                <ng-content></ng-content>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "MyBookingComponent",
            "id": "component-MyBookingComponent-33fa8c7258df0eaab7906e5de13f6aa9f1bd41061fad8213df85e1dea4ab5953e8a1d0f4ff31d489cd0cdb561add46e55dcef9e816e9d55c010d141599934565",
            "file": "src/app/my-booking/my-booking.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-booking",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./my-booking.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bookingForDeletion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BookingDto | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "coworkings$",
                    "defaultValue": "this.api.GetBookings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CoworkingDto[]>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "deleteOpened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "workspaceImages",
                    "defaultValue": "[\"assets\\\\Open Space 1.jpg\", \"assets\\\\Private Room 1.jpg\", \"assets\\\\Meeting Room 1.jpg\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteBooking",
                    "args": [
                        {
                            "name": "booking",
                            "type": "BookingDto | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "BookingDto | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "booking",
                            "type": "BookingDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "BookingDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImageSrc",
                    "args": [
                        {
                            "name": "type",
                            "type": "WorkspaceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "WorkspaceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "booking",
                            "type": "BookingDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "BookingDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTime",
                    "args": [
                        {
                            "name": "booking",
                            "type": "BookingDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "BookingDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDelete",
                    "args": [
                        {
                            "name": "booking",
                            "type": "BookingDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "BookingDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BookingDto } from '../../DTOs/GetBooking/BookingDto';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiService } from '../api.service';\r\nimport { WorkspaceType } from '../../models/WorkspaceType';\r\nimport { CoworkingDto } from '../../DTOs/GetBooking/CoworkingDto';\r\n\r\n@Component({\r\n  selector: 'app-my-booking',\r\n  templateUrl: './my-booking.component.html',\r\n  styleUrl: './my-booking.component.css',\r\n  standalone: false\r\n})\r\nexport class MyBookingComponent\r\n{\r\n  constructor(private api: ApiService) { }\r\n  coworkings$?: Observable<CoworkingDto[]> = this.api.GetBookings();\r\n  workspaceImages = [\"assets\\\\Open Space 1.jpg\", \"assets\\\\Private Room 1.jpg\", \"assets\\\\Meeting Room 1.jpg\"];\r\n  getImageSrc(type: WorkspaceType)\r\n  {\r\n    switch (type) {\r\n      case (WorkspaceType.OpenSpace):\r\n        return this.workspaceImages[0];\r\n      case (WorkspaceType.PrivateRoom):\r\n        return this.workspaceImages[1];\r\n      case (WorkspaceType.MeetingRoom):\r\n        return this.workspaceImages[2];\r\n      default:\r\n        return \"assets\\\\armchair.svg\"\r\n    }\r\n  }\r\n  getName(booking: BookingDto)\r\n  {\r\n    let name = \"\";\r\n    switch (booking.workspace.workspaceType) {\r\n      case (WorkspaceType.OpenSpace):\r\n        name += \"Open space\";\r\n        break;\r\n      case (WorkspaceType.PrivateRoom):\r\n        name += \"Private room\";\r\n        break;\r\n      case (WorkspaceType.MeetingRoom):\r\n        name += \"Meeting room\";\r\n        break;\r\n    }\r\n    name += \" for \"\r\n    name += booking.seats\r\n    if (booking.seats == 1) {\r\n      name += \" person\"\r\n    }\r\n    else {\r\n      name += \" people\"\r\n    }\r\n    return name;\r\n  }\r\n  getDate(booking: BookingDto)\r\n  {\r\n    if (booking.workspace.workspaceType == WorkspaceType.MeetingRoom) {\r\n      return `${booking.startDate}`;\r\n    }\r\n    else {\r\n      let startDate = new Date(new Date(booking.startDate).getFullYear(), new Date(booking.startDate).getMonth(), new Date(booking.startDate).getDate(), 12, 0, 0);\r\n      let endDate = new Date(new Date(booking.endDate).getFullYear(), new Date(booking.endDate).getMonth(), new Date(booking.endDate).getDate(), 12, 0, 0);\r\n      let difference = Math.round((endDate.getTime() - startDate.getTime()) / (1000 * 3600 * 24)) + 1;\r\n      return `${booking.startDate} - ${booking.endDate} (${difference} ${difference == 1 ? \"day\" : \"days\"})`;\r\n    }\r\n  }\r\n  getTime(booking: BookingDto)\r\n  {\r\n    let startHour = +booking.startTime.slice(0, 2);\r\n    let startMinute = +booking.startTime.slice(3, 5);\r\n    let startTime = `${startHour > 12 ? startHour - 12 : startHour}:${booking.startTime.slice(3, 5)} ${startHour > 12 ? \"PM\" : \"AM\"}`;\r\n    let endHour = +booking.endTime.slice(0, 2);\r\n    let endMinute = +booking.endTime.slice(3, 5);\r\n    let endTime = `${endHour > 12 ? endHour - 12 : endHour}:${booking.endTime.slice(3, 5)} ${endHour > 12 ? \"PM\" : \"AM\"}`;\r\n    if (booking.workspace.workspaceType == WorkspaceType.MeetingRoom) {\r\n      let duration = (endHour * 60 + endMinute) - (startHour * 60 + startMinute);\r\n      let durationHours = Math.floor(duration / 60);\r\n      let durationminutes = duration % 60;\r\n      let durationString = \"\";\r\n      if (durationHours != 0) {\r\n        if (durationminutes != 0) {\r\n          durationString = `${durationHours} ${durationHours == 1 ? \"hour\" : \"hours\"} ${durationminutes} ${durationminutes == 1 ? \"minute\" : \"minutes\"}`\r\n        }\r\n        else {\r\n          durationString = `${durationHours} ${durationHours == 1 ? \"hour\" : \"hours\"}`\r\n        }\r\n      }\r\n      else {\r\n        durationString = `${durationminutes} ${durationminutes == 1 ? \"minute\" : \"minutes\"}`\r\n      }\r\n      return `from ${startTime} to ${endTime} (${durationString})`;\r\n    }\r\n    else {\r\n      return `from ${startTime} to ${endTime}`;\r\n    }\r\n  }\r\n\r\n  deleteOpened = false;\r\n  bookingForDeletion: BookingDto | undefined;\r\n  showDelete(booking: BookingDto)\r\n  {\r\n    this.bookingForDeletion = booking;\r\n    this.deleteOpened = true;\r\n  }\r\n  deleteBooking(booking: BookingDto | undefined)\r\n  {\r\n    if (booking != undefined) {\r\n      this.api.DeleteBooking(booking.id).subscribe(() =>\r\n      {\r\n        this.deleteOpened = false;\r\n        this.coworkings$ = this.api.GetBookings();\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./my-booking.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-col p-20 gap-10\">\r\n    <ng-container *ngIf=\"(coworkings$ | async) as coworkings; else emptylist\">\r\n        @for(coworking of coworkings;track coworking.id; let  i = $index){\r\n        <div class=\"text-4xl\">My bookings on {{coworking.name}}</div>\r\n        <div class=\"flex flex-col gap-6\">\r\n            @for    (booking of coworking.bookings;track booking.id; let  j = $index){\r\n            <div class=\"flex flex-row gap-8 p-4 bg-white rounded-2xl\">\r\n                <div class=\"w-3/10\">\r\n                    <img class=\"aspect-4/3 object-cover rounded-2xl\" src=\"{{getImageSrc(booking.workspace.workspaceType)}}\">\r\n                </div>\r\n                <div class=\"flex flex-col py-3 gap-8 flex-grow-1\">\r\n                    <div class=\"flex flex-row justify-between gap-3\">\r\n                        <div>\r\n                            <div class=\"text-3xl\">{{getName(booking)}}</div>\r\n                        </div>\r\n                        <div class=\"flex flex-row gap-3 \">\r\n                            <div class=\"p-[10px] rounded-lg border-2 border-[#C2BCD8] self-start\" routerLink=\"/edit-booking-form/{{booking.id}}\" routerLinkActive=\"active\">\r\n                                <img class=\"w-6 aspect-1/1\" src=\"assets\\edit.svg\" />\r\n                            </div>\r\n                            <div (click)=\"showDelete(booking)\" class=\"p-[10px] rounded-lg border-2 border-[#F56E6E] self-start\">\r\n                                <img class=\"w-6 aspect-1/1\" src=\"assets\\trash.svg\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex flex-col gap-3\">\r\n                        <div class=\"flex flex-row gap-3 items-center\">\r\n                            <div class=\"p-[10px] rounded-xl bg-[#F5F3FB]\">\r\n                                <img class=\"size-6\" src=\"assets\\calendar.svg\" />\r\n                            </div>\r\n                            <div class=\"text-lg\">{{getDate(booking)}}</div>\r\n                        </div>\r\n                        <div class=\"flex flex-row gap-3 items-center\">\r\n                            <div class=\"p-[10px] rounded-xl bg-[#F5F3FB]\">\r\n                                <img class=\"size-6\" src=\"assets\\clock-hour-3.svg\" />\r\n                            </div>\r\n                            <div class=\"text-lg\">{{getTime(booking)}}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n        }\r\n    </ng-container>\r\n    <ng-template #emptylist>\r\n        <div class=\"p-4 bg-white rounded-2xl\">\r\n            <div class=\" flex flex-col gap-5 items-center p-10\">\r\n                <div class=\"text-3xl\">🔍</div>\r\n                <div class=\"text-3xl\">You don’t have any bookings yet</div>\r\n                <div class=\"text-neutral-500\">Start by choosing a coworking space</div>\r\n                <div>\r\n                    <button class=\"bg-blue-600 text-white px-6 rounded-lg h-12\" routerLink=\"/coworking-details\" routerLinkActive=\"active\">Select a workspace</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n    <app-ai-assistant></app-ai-assistant>\r\n    <app-modal [(opened)]=\"deleteOpened\">\r\n        <div class=\"flex flex-col gap-4 p-10 bg-white rounded-2xl\">\r\n            <div class=\"flex flex-row\">\r\n                <div>\r\n                    <img class=\"size-20\" src=\"assets\\Icon Delete.svg\" />\r\n                </div>\r\n                <div class=\"flex-grow-1\"></div>\r\n                <div (click)=\"deleteOpened=false\">\r\n                    <img width=\"36\" height=\"36\" src=\"assets\\x.svg\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"text-3xl\">\r\n                Cancel your booking?\r\n            </div>\r\n            <div class=\"text-neutral-500\">\r\n                This action cannot be undone\r\n            </div>\r\n            <div class=\"flex flex-row  items-center gap-3\">\r\n                <div class=\"flex-grow-1\">\r\n                    <button (click)=\"deleteBooking(bookingForDeletion)\" class=\"text-center border-blue-600 border-1 text-black px-6 rounded-lg py-2 w-full\">\r\n                        Yes, cancel it\r\n                    </button>\r\n                </div>\r\n                <div class=\"flex-grow-1\">\r\n                    <button (click)=\"deleteOpened=false\" class=\"text-center bg-blue-600 text-white px-6 rounded-lg py-2 w-full\">\r\n                        No, keep it\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </app-modal>\r\n</div>\r\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-f1e0ffb8b6f7f79b9ecfb8fdba0cfc2265ba703640b497f6ce93ddc045310cf21b89fad67cc5ca9db8da39277eda7aef881e77694ae47ef93869c636edbb2b28",
            "file": "src/app/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "url",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "user$",
                    "defaultValue": "this.api.getUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "username",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "checkNav",
                    "args": [
                        {
                            "name": "nav",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nav",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelectedNav",
                    "args": [
                        {
                            "name": "nav",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nav",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedNav",
                    "args": [
                        {
                            "name": "nav",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"\" | \"border-b-[1.5px] border-[#5C5AF3]\"",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nav",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { environment } from './../../environments/environment';\r\n\r\nimport { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, shareReplay } from 'rxjs/operators';\r\nimport { ActivatedRoute, NavigationEnd, NavigationStart, Router } from '@angular/router';\r\nimport { ApiService } from '../api.service';\r\nimport { LoginDto } from '../../DTOs/LoginDto';\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrl: './navigation.component.css',\r\n  standalone: false\r\n})\r\nexport class NavigationComponent\r\n{\r\n  constructor(\r\n    private api: ApiService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  )\r\n  {\r\n    router.events.pipe(filter((e): e is NavigationEnd => e instanceof NavigationEnd))\r\n      .subscribe({\r\n        next: (e: NavigationEnd) =>\r\n        {\r\n          this.url = e.url;\r\n          this.updateUser();\r\n        }\r\n      });\r\n    router.events.pipe(filter((e): e is NavigationStart => e instanceof NavigationStart))\r\n      .subscribe({\r\n        next: (e: NavigationStart) =>\r\n        {\r\n          this.url = e.url;\r\n          this.updateUser();\r\n        }\r\n      })\r\n\r\n  }\r\n  /*\r\n  private breakpointObserver = inject(BreakpointObserver);\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  accountInfo?: AccountInfo;*/\r\n\r\n  url: string = \"\";\r\n  checkNav(nav: string)\r\n  {\r\n    return this.url.includes(nav);\r\n  }\r\n  setSelectedNav(nav: string)\r\n  {\r\n    return this.url.includes(nav) ? \"border-b-[1.5px] border-[#5C5AF3]\" : \"\";\r\n  }\r\n  isSelectedNav(nav: string)\r\n  {\r\n    return this.url.includes(nav);\r\n  }\r\n\r\n  user$ = this.api.getUser();\r\n\r\n  username = \"\";\r\n  login()\r\n  {\r\n    this.api.login(<LoginDto>{ email: this.username }).subscribe(() =>\r\n    {\r\n      this.updateUser();\r\n      const currentUrl = this.router.url;\r\n      this.router.navigateByUrl('/dummy', { skipLocationChange: true }).then(() =>\r\n      {\r\n        this.router.navigate([currentUrl]);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  updateUser()\r\n  {\r\n    this.user$ = this.api.getUser();\r\n  }\r\n\r\n  ngOnInit()\r\n  {\r\n    this.updateUser();\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./navigation.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-row px-20 py-5 gap-16 justify-between items-center bg-white\">\r\n    <div class=\"w-[168px] h-[48px]\">\r\n        <a class=\"w-[168px] h-[48px]\" routerLink=\"/coworking-details\" routerLinkActive=\"active\">\r\n            <img class=\"w-[168px] h-[48px] min-w-[100px] object-cover\" src=\"assets\\Logo.jpg\" />\r\n        </a>\r\n    </div>\r\n\r\n\r\n    <div class=\"flex flex-row gap-16 justify-end items-center\">\r\n        <div class=\"flex flex-col gap-1\">\r\n            <div>\r\n                You logged as {{(user$|async)?.value}}. Not you?\r\n            </div>\r\n            <div class=\"flex flex-row gap-1\">\r\n                <div>\r\n                    <input type=\"text\" placeholder=\"Email\" [(ngModel)] =\"username\" class=\"border border-gray-300 text-gray-900 text-sm rounded-lg focus:outline-indigo-600 focus:border-blue-500 block w-full p-1\" />\r\n                </div>\r\n                <div>\r\n                    <button class=\"bg-blue-600 text-white p-1 text-sm rounded-lg\" (click)=\"login()\">Login</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <span [ngClass]=\"{'border-b-[1.5px] border-[#5C5AF3]': isSelectedNav('/coworking-list')}\" class=\"h-10 flex flex-col justify-center\">\r\n            <a class=\"text-base\" routerLink=\"/coworking-list\" routerLinkActive=\"active\">Coworkings</a>\r\n        </span>\r\n        <span [ngClass]=\"{'border-b-[1.5px] border-[#5C5AF3]': isSelectedNav('/my-booking')}\" class=\"h-10 flex flex-col justify-center\">\r\n            <a routerLink=\"/my-booking\" routerLinkActive=\"active\">My Bookings</a>\r\n        </span>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "PhotoGalleryComponent",
            "id": "component-PhotoGalleryComponent-baa1d8b1f9e9bbd221044febe6e58de8c31b0e11ffc8d13493541fa193dd8738f82e230e0bd9dec29f7be8237be66b7b3861d2d8eda9df8afc1a11300d54266a",
            "file": "src/app/photo-gallery/photo-gallery.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-photo-gallery",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./photo-gallery.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "photoSrcs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selected",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-photo-gallery',\r\n  templateUrl: './photo-gallery.component.html',\r\n  styleUrl: './photo-gallery.component.css',\r\n  standalone: false\r\n})\r\nexport class PhotoGalleryComponent {\r\n  @Input() photoSrcs: string[] = [];\r\n  selected = 0;\r\n\r\n}\r\n",
            "styleUrl": "./photo-gallery.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n    @if(photoSrcs && photoSrcs.length > 0){\r\n    <div class=\"flex flex-col gap-3\">\r\n        <div class=\"w-full aspect-4/3\">\r\n            <img class=\"w-full h-full object-cover rounded-2xl\" src=\"{{photoSrcs[selected]}}\" />\r\n        </div>\r\n        <div class=\"flex flex-row w-full gap-2\">\r\n            @for (src of photoSrcs; track src; let  i = $index) {\r\n            <div class=\"w-1/4 \">\r\n                <img class=\" aspect-4/3 object-cover rounded-lg\" src=\"{{src}}\" (click)=\"selected = i\" [ngClass]=\"{'opacity-50': selected!=i}\" />\r\n            </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    }\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-16639658e67ca73c16975867d50bf389f6053ae76bbcb237db478dbe18ad0ae8a67a2733abc11824bdfb4e536eef8b8b1bb1dcfaa1f42c817185aad6dff6a080",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NavigationComponent } from './navigation/navigation.component';\r\nimport { BookingFormComponent } from './booking-form/booking-form.component';\r\nimport { CoworkingDetailsComponent } from './coworking-details/coworking-details.component';\r\nimport { DatePickerComponent } from './date-picker/date-picker.component';\r\nimport { EditBookingFormComponent } from './edit-booking-form/edit-booking-form.component';\r\nimport { MyBookingComponent } from './my-booking/my-booking.component';\r\nimport { PhotoGalleryComponent } from './photo-gallery/photo-gallery.component';\r\nimport { DropdownComponent } from './dropdown/dropdown.component';\r\nimport { ModalComponent } from './modal/modal.component';\r\nimport { CoworkingListComponent } from './coworking-list/coworking-list.component';\r\nimport { AiAssistantComponent } from './ai-assistant/ai-assistant.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    BookingFormComponent,\r\n    CoworkingDetailsComponent,\r\n    DatePickerComponent,\r\n    EditBookingFormComponent,\r\n    MyBookingComponent,\r\n    NavigationComponent,\r\n    PhotoGalleryComponent,\r\n    DropdownComponent,\r\n    ModalComponent,\r\n    CoworkingListComponent,\r\n    AiAssistantComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AiAssistantComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BookingFormComponent"
                        },
                        {
                            "name": "CoworkingDetailsComponent"
                        },
                        {
                            "name": "CoworkingListComponent"
                        },
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "EditBookingFormComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "MyBookingComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "PhotoGalleryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-20db4b496bb884cec9b4713acee74efea222ecf6b8808e9ef9e1747a7ab4e646090e98acd9c709e6a5bf69669aba86b2fc1583d8896da03a28fe5d37de7ba1f8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ExtraOptions, RouterModule, Routes } from '@angular/router';\r\nimport { CoworkingDetailsComponent } from './coworking-details/coworking-details.component';\r\nimport { BookingFormComponent } from './booking-form/booking-form.component';\r\nimport { MyBookingComponent } from './my-booking/my-booking.component';\r\nimport { EditBookingFormComponent } from './edit-booking-form/edit-booking-form.component';\r\nimport { CoworkingListComponent } from './coworking-list/coworking-list.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'coworking-list',\r\n    component: CoworkingListComponent\r\n  },\r\n  {\r\n    path: 'coworking-details/:id',\r\n    component: CoworkingDetailsComponent,\r\n  },\r\n  {\r\n    path: 'booking-form/:id/:type',\r\n    component: BookingFormComponent\r\n  },\r\n  {\r\n    path: 'booking-form/:id',\r\n    component: BookingFormComponent\r\n  },\r\n  {\r\n    path: 'my-booking',\r\n    component: MyBookingComponent\r\n  },\r\n  {\r\n    path: 'edit-booking-form/:id',\r\n    component: EditBookingFormComponent\r\n  },\r\n\r\n  { path: '', redirectTo: '/coworking-list', pathMatch: 'full' },\r\n  { path: \"**\", component: CoworkingListComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, <ExtraOptions>{ bindToComponentInputs: true, onSameUrlNavigation: 'reload', scrollPositionRestoration: 'top' })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  //server: 'localhost:7018'\n  server: 'localhost:7087'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  server: '$API_URL'\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Amenity",
                "childs": [
                    {
                        "name": "Coffee",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "GameRoom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "WiFi",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "Conditioner",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "Microphone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "Headphones",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/Amenity.ts"
            },
            {
                "name": "WorkspaceType",
                "childs": [
                    {
                        "name": "OpenSpace",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "PrivateRoom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "MeetingRoom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/WorkspaceType.ts"
            }
        ],
        "groupedVariables": {
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  //server: 'localhost:7018'\n  server: 'localhost:7087'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  server: '$API_URL'\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/models/Amenity.ts": [
                {
                    "name": "Amenity",
                    "childs": [
                        {
                            "name": "Coffee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "GameRoom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "WiFi",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "Conditioner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "Microphone",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "Headphones",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/Amenity.ts"
                }
            ],
            "src/models/WorkspaceType.ts": [
                {
                    "name": "WorkspaceType",
                    "childs": [
                        {
                            "name": "OpenSpace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "PrivateRoom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "MeetingRoom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/WorkspaceType.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "coworking-list",
                        "component": "CoworkingListComponent"
                    },
                    {
                        "path": "coworking-details/:id",
                        "component": "CoworkingDetailsComponent"
                    },
                    {
                        "path": "booking-form/:id/:type",
                        "component": "BookingFormComponent"
                    },
                    {
                        "path": "booking-form/:id",
                        "component": "BookingFormComponent"
                    },
                    {
                        "path": "my-booking",
                        "component": "MyBookingComponent"
                    },
                    {
                        "path": "edit-booking-form/:id",
                        "component": "EditBookingFormComponent"
                    },
                    {
                        "path": "",
                        "redirectTo": "/coworking-list",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "component": "CoworkingListComponent",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/DTOs/CreateBookingDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateBookingDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/EditBookingDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EditBookingDto",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetBooking/BookingDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookingDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetBooking/WorkspaceDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkspaceDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetBookings/BookingDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookingDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetBookings/CoworkingDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CoworkingDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetBookings/WorkspaceDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkspaceDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetCoworkings/CoworkingDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CoworkingDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetCoworkings/RoomCountDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoomCountDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetWorkspaces/BookingDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookingDto",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetWorkspaces/FreeRoomsDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreeRoomsDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/GetWorkspaces/WorkspaceGroupDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkspaceGroupDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/LoginDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/DTOs/StringDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StringDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ai-assistant/ai-assistant.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AiAssistantComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/booking-form/booking-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookingFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/coworking-details/coworking-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoworkingDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/coworking-list/coworking-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoworkingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/edit-booking-form/edit-booking-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditBookingFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/my-booking/my-booking.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyBookingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/photo-gallery/photo-gallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhotoGalleryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/models/Option.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Option",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            }
        ]
    }
}